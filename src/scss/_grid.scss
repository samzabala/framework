$prefix: '.grid';
$prefix-raw: str-replace($prefix, '.', '');

#{$prefix} {
  --fw-grid-gap-x: #{$grid-gap};
  --fw-grid-gap-y: #{$grid-gap};
  --fw-grid-units: #{$grid-units};

  --fw-grid-col-unit: var(--fw-grid-units);

  padding: 0;
  row-gap: var(--fw-grid-gap-y);
  column-gap: var(--fw-grid-gap-x);
  margin-top: var(--fw-grid-gap-y);
  margin-bottom: var(--fw-grid-gap-y);

  @at-root :is([class*='#{$prefix-raw}-col-'], #{$prefix}-col) {
    min-width: 0;
  }

  :is(#{$prefix}-flex-fixed > [class*='#{$prefix-raw}-col-'], #{$prefix}-col) {
    //@TODO deprecate
    flex-grow: 0;
    flex-shrink: 0;
    // flex-basis: auto;
  }

  &#{$prefix}-expanded {
    --fw-grid-gap-x: #{$grid-gap-expanded};
    --fw-grid-gap-y: #{$grid-gap-expanded};
  }

  &#{$prefix}-compact {
    --fw-grid-gap-x: #{$grid-gap-compact};
    --fw-grid-gap-y: #{$grid-gap-compact};
  }

  &:is(#{$prefix}-constricted, #{$prefix}-constricted-x) {
    --fw-grid-gap-x: 0rem;
  }

  &:is(#{$prefix}-constricted, #{$prefix}-constricted-y) {
    --fw-grid-gap-y: 0rem;
  }

  &#{$prefix}-default {
    display: grid;
    grid-template-columns: repeat(var(--fw-grid-col-unit), 1fr);

    > :is([class*='#{$prefix-raw}-col-'], #{$prefix}-col) {
      width: 100%;
      grid-column: span var(--fw-grid-col-unit);
    }
  }

  &#{$prefix}-flex {
    display: flex;
    flex-wrap: wrap;
    max-width: none;
    width: auto;
    column-gap: 0; //doesnt work >:(
    margin-left: calc(var(--fw-grid-gap-x) * -1);
    // margin-bottom: var(--fw-grid-gap-y);

    > :is([class*='#{$prefix-raw}-col-'], #{$prefix}-col) {
      margin-left: var(--fw-grid-gap-x);
      max-width: calc(100% - var(--fw-grid-gap-x));
      // max-width: 100%;
    }

    > [class*='#{$prefix-raw}-col-'] {
      // margin-top: var(--fw-grid-gap-y);

      flex-grow: 1;
      flex-shrink: 1;
      flex-basis: calc(
        (100% * (var(--fw-grid-col-unit) / var(--fw-grid-units)) - var(--fw-grid-gap-x))
      );
      // flex-basis: calc(
      //   (100% * (var(--fw-grid-col-unit) / var(--fw-grid-units)))
      // );
    }

    &#{$prefix}-flex-fixed > [class*='#{$prefix-raw}-col-'] {
      flex-grow: 0;
      flex-shrink: 0;
      // flex-basis: auto;
      width: calc(
        (100% * (var(--fw-grid-col-unit) / var(--fw-grid-units))) - var(--fw-grid-gap-x)
      );
      // width: calc(
      //   (100% * (var(--fw-grid-col-unit) / var(--fw-grid-units)))
      // );
    }
  }

  &#{$prefix}-masonry {
    column-count: calc(var(--fw-grid-units) / var(--fw-grid-col-unit));

    > :is([class*='#{$prefix-raw}-col-'], #{$prefix}-col) {
      -webkit-column-break-inside: avoid;
      page-break-inside: avoid;
      break-inside: avoid;

      &:nth-child(n + 2) {
        margin-top: var(--fw-grid-gap-y);
      }
    }
  }
}

@each $tag in $fwc-br-tags {
  @if $tag != xs and $tag != xxs {
    @include br($tag) {
      @for $i from 1 through $grid-units {
        @if ($grid-units % $i == 0) {
          :is(#{$prefix}-col-#{$tag}-#{$i}, #{$prefix}-masonry-#{$tag}-#{$i}) {
            --fw-grid-col-unit: #{$i};
          }
        } @else {
          #{$prefix}-col-#{$tag}-#{$i} {
            --fw-grid-col-unit: #{$i};
          }
        }
      }
    }
  } @else {
    @for $i from 1 through $grid-units {
      @if ($grid-units % $i == 0) {
        :is(
            #{$prefix}-col-#{$i},
            #{$prefix}-masonry-#{$i},
            #{$prefix}-col-xs-#{$i},
            #{$prefix}-masonry-xs-#{$i}
          ) {
          --fw-grid-col-unit: #{$i};
        }
      } @else {
        :is(#{$prefix}-col-#{$i}, #{$prefix}-col-xs-#{$i}) {
          --fw-grid-col-unit: #{$i};
        }
      }
    }
  }
}
