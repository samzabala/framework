$prefix: '.background';
#{$prefix} {
  &-image-none {
    @include create-palette-helper(#{&}) {
      background-image: none !important;
    }
  }
  @each $color, $var in $calculated-theme-colors-background {
    @include create-palette-helper(#{&}-#{$color}, background-color, $var);
  }

  //gradient
  &-gradient {
    @at-root %for-gradient-legacy-fallback {
      background-color: $var-gradient-start !important;
    }
    //legacy/default
    $gradient-legacy-selector: #{&};
    $gradient-legacy-selector-angled: $gradient-legacy-selector;
    $calculated-gradient-legacy-all-selector: $gradient-legacy-selector;

    @each $angle in $calculated-gradient-angles-legacy {
      @if $angle > 0 {
        $gradient-legacy-selector-angled: #{$gradient-legacy-selector}-#{$angle};
      }

      @include create-palette-helper(#{$gradient-legacy-selector-angled}) {
        @extend %for-gradient-legacy-fallback !optional;
        @include gradient(
          (
            color1: $var-gradient-start,
            color2: $var-gradient-end,
            angle: to-unit($angle, deg),
            use-shorthand: false,
            add-important: true,
            use-fallback: false,
          )
        );
      }
    }

    //stops support
    $gradient-selector: #{&};
    $gradient-selector-angled: $gradient-selector;

    @each $angle in $calculated-gradient-angles {
      @if $angle > 0 {
        $gradient-selector-angled: #{$gradient-selector}-#{$angle};
      }

      @each $color1, $var1 in $calculated-gradient-color-stops {
        @at-root %for-gradient-#{'' + $color1}-fallback {
          background-color: $var1 !important;
        }
        @each $color2, $var2 in $calculated-gradient-color-stops {
          $selector: #{$gradient-selector-angled}-from-#{'' +
            $color1}-to-#{'' +
            $color2};
          @include create-palette-helper($selector) {
            @if $color1 != $color2 {
              @extend %for-gradient-#{'' + $color1}-fallback !optional;
              @include gradient(
                (
                  color1: $var1,
                  color2: $var2,
                  color1-offset: '',
                  color2-offset: '',
                  angle: to-unit($angle, deg),
                  use-shorthand: false,
                  add-important: true,
                  use-fallback: false,
                )
              );
            }
          }
        }
      }
    }
  }

  //inherit
  @include create-palette-helper(#{&}-inherit, background-color, inherit);

  //transparent
  @include create-palette-helper(#{&}-transparent, background-color, transparent);

  @include dump-palette-helpers(background);
}
