/*** HELPERS ***/

/* BACKGROUND CLASSES */



/* COLOR CLASSES */



.display {
  &-block {
    display: block !important;
  }
  &-inline-block {
    display: inline-block !important;
  }
  &-inline {
    display: inline !important;
  }
  &-none {
    @include dump-styles(display-none-important);
  }
}

/* TEXT CLASSES */
$prefix: '.text';
#{$prefix} {
  &-leading {
    &-compact {
      line-height: $calculated-body-line-height * $body-line-height-compact-factor !important;
    }

    &-expanded {
      line-height: $calculated-body-line-height * $body-line-height-expanded-factor !important;
    }

    &-normalize {
      line-height: $calculated-body-line-height !important;
    }

    &-inherit {
      line-height: inherit !important;
    }

    &-whole {
      line-height: 1 !important;
    }
  }

  &-align {
    &-center {
      text-align: center !important;
    }
    &-left {
      text-align: left !important;
    }
    &-right {
      text-align: right !important;
    }
    &-justify {
      text-align: justify !important;
    }
    &-inherit {
      text-align: inherit !important;
    }
  }

  &-decoration {
    &-none {
      text-decoration: none !important;
    }
    &-line {
      &-underline {
        text-decoration-line: underline !important;
      }
      &-line-through {
        text-decoration-line: line-through !important;
      }
      &-overline {
        text-decoration-line: overline !important;
      }
    }
    &-style {
      &-solid {
        text-decoration-style: solid !important;
      }
      &-wavy {
        text-decoration-style: wavy !important;
      }
      &-double {
        text-decoration-style: double !important;
      }
      &-wavy {
        text-decoration-style: wavy !important;
      }
    }
  }

  &-transform {
    &-uppercase {
      text-transform: uppercase !important;
    }
    &-lowercase {
      text-transform: lowercase !important;
    }
    &-capitalize {
      text-transform: capitalize !important;
    }
    &-inherit {
      text-transform: inherit !important;
    }

    &-none {
      text-transform: none !important;
    }
  }

  &-vertical-align {
    &-middle {
      vertical-align: middle !important;
    }
    &-baseline {
      vertical-align: baseline !important;
    }
    &-top {
      vertical-align: top !important;
    }
    &-bottom {
      vertical-align: bottom !important;
    }
    &-text-top {
      vertical-align: text-top !important;
    }
    &-text-bottom {
      vertical-align: text-bottom !important;
    }
    &-sub {
      vertical-align: sub !important;
    }
    &-super {
      vertical-align: super !important;
    }
    &-inherit {
      vertical-align: inherit !important;
    }
  }

  &-nowrap {
    white-space: nowrap !important;
  }

  &-wrap {
    white-space: normal !important;

    &-break {
      word-break: break-word !important;
      overflow-wrap: break-word !important;
    }

    &-ellipsis {
      @include dump-styles(text-ellipsis-single);

      /* gotta be block otherwise shit wont happen */
      display: block;
      max-width: 100% !important;

      &-multiple {
        overflow: hidden !important;
        text-overflow: ellipsis !important;
        display: -webkit-box !important;
        -webkit-line-clamp: $body-ellipsis-multiple-factor !important;
        -webkit-box-orient: vertical !important;
        height: calc(
          (#{$calculated-body-single-line}) * #{$body-ellipsis-multiple-factor}
        );

        #{$prefix}-leading-compact &,
        &#{$prefix}-leading-compact {
          height: calc(
            (#{$calculated-body-single-line} * #{$body-line-height-compact-factor}) * #{$body-ellipsis-multiple-factor}
          );
        }
        #{$prefix}-leading-expanded &,
        &#{$prefix}-leading-expanded {
          height: calc(
            (#{$calculated-body-single-line} * #{$body-line-height-expanded-factor}) * #{$body-ellipsis-multiple-factor}
          );
        }
      }
    }
  }

  &-clip-background {
    @supports not (-webkit-background-clip: text) {
      background: transparent !important;
      color: $var-color-primary !important;
    }

    @supports (-webkit-background-clip: text) {
      -webkit-background-clip: text !important;
      -webkit-text-fill-color: transparent !important;
    }
  }
}

//box model helpy
.no-border {
  @include create-box-helper(#{&}, '', border, '', 0, 'for-no-border');
}

.margin {
  & {
    @include create-box-helper(#{&}, '', margin, '', $gutter-base, 'for-margin-base');
  }
  &-large {
    @include create-box-helper(#{&}, '', margin, '', $gutter-large, 'for-margin-large');
  }
  &-small {
    @include create-box-helper(#{&}, '', margin, '', $gutter-small, 'for-margin-small');
  }
  &-micro {
    @include create-box-helper(#{&}, '', margin, '', $gutter-micro, 'for-margin-micro');
  }
}

.no-margin {
  @include create-box-helper(#{&}, '', margin, '', 0, 'for-no-margin');
}

.margin-auto {
  @include create-box-helper(#{&}, '', margin, '', auto, 'for-margin-auto');
}

.no-padding {
  @include create-box-helper(#{&}, '', padding, '', 0, 'for-no-padding');
}

.padding {
  & {
    @include create-box-helper(#{&}, '', padding, '', $gutter-base, 'for-padding-base');
  }
  &-large {
    @include create-box-helper(
      #{&},
      '',
      padding,
      '',
      $gutter-large,
      'for-padding-large'
    );
  }
  &-small {
    @include create-box-helper(
      #{&},
      '',
      padding,
      '',
      $gutter-small,
      'for-padding-small'
    );
  }
  &-micro {
    @include create-box-helper(
      #{&},
      '',
      padding,
      '',
      $gutter-micro,
      'for-padding-micro'
    );
  }
}

.no-scrollbar {
  @include dump-styles(no-scrollbar);
}

.overflow {
  & {
    &-visible {
      overflow: visible !important;
    }
    &-hidden {
      overflow: hidden !important;
    }
    &-scroll {
      overflow: scroll !important;
    }
    &-overlay {
      overflow: scroll !important;
      overflow: overlay !important;
    }
    &-auto {
      overflow: auto !important;
    }
  }

  &-x {
    &-visible {
      overflow-x: visible !important;
    }
    &-hidden {
      overflow-x: hidden !important;
    }
    &-scroll {
      overflow-x: scroll !important;
    }
    &-overlay {
      overflow-x: scroll !important;
      overflow-x: overlay !important;
    }
    &-auto {
      overflow-x: auto !important;
    }
  }

  &-y {
    &-visible {
      overflow-y: visible !important;
    }
    &-hidden {
      overflow-y: hidden !important;
    }
    &-scroll {
      overflow-y: scroll !important;
    }
    &-overlay {
      overflow-y: scroll !important;
      overflow-y: overlay !important;
    }
    &-auto {
      overflow-y: auto !important;
    }
  }
}

//posesetyen
.position {
  &-relative {
    position: relative !important;
  }
  &-static {
    position: static !important;
  }
  &-absolute {
    position: absolute !important;
  }
  &-fixed {
    position: fixed !important;
  }
  &-sticky {
    position: sticky !important;
  }
}

.offset {
  &,
  &-y,
  &-top {
    &-0 {
      top: 0;
    }
    &-auto {
      top: auto;
    }
    &-flush {
      top: 100%;
    }
  }

  &,
  &-y,
  &-bottom {
    &-0 {
      bottom: 0;
    }
    &-auto {
      bottom: auto;
    }
    &-flush {
      bottom: 100%;
    }
  }

  &,
  &-x,
  &-left {
    &-0 {
      left: 0;
    }
    &-auto {
      left: auto;
    }
    &-flush {
      left: 100%;
    }
  }

  &,
  &-x,
  &-right {
    &-0 {
      right: 0;
    }
    &-auto {
      right: auto;
    }
    &-flush {
      right: 100%;
    }
  }
}

.float {
  &-left {
    float: left !important;
  }
  &-right {
    float: right !important;
  }
  &-none {
    float: none !important;
  }
  &-inherit {
    float: inherit !important;
  }
}

.clear {
  &-left {
    clear: left !important;
  }
  &-right {
    clear: right !important;
  }
  &-both {
    clear: both !important;
  }
  &-none {
    clear: none !important;
  }
  &-inherit {
    clear: inherit !important;
  }
}

// align and justify shit

.justify {
  &-content {
    &-start {
      justify-content: start !important;
    }
    &-end {
      justify-content: end !important;
    }
    &-flex-start {
      justify-content: flex-start !important;
    }
    &-flex-end {
      justify-content: flex-end !important;
    }
    &-left {
      justify-content: left !important;
    }
    &-right {
      justify-content: right !important;
    }
    &-center {
      justify-content: center !important;
    }
    &-stretch {
      justify-content: stretch !important;
    }
    &-normal {
      justify-content: normal !important;
    }
    &-space-between {
      justify-content: space-between !important;
    }
    &-space-around {
      justify-content: space-around !important;
    }
    &-space-evenly {
      justify-content: space-evenly !important;
    }
    &-inherit {
      justify-content: inherit !important;
    }
  }

  &-items {
    &-start {
      justify-items: start !important;
    }
    &-end {
      justify-items: end !important;
    }
    &-flex-start {
      justify-items: flex-start !important;
    }
    &-flex-end {
      justify-items: flex-end !important;
    }
    &-self-start {
      justify-items: self-start !important;
    }
    &-self-end {
      justify-items: self-end !important;
    }
    &-left {
      justify-items: left !important;
    }
    &-right {
      justify-items: right !important;
    }
    &-center {
      justify-items: center !important;
    }
    &-baseline {
      justify-items: baseline !important;
    }
    &-stretch {
      justify-items: stretch !important;
    }
    &-normal {
      justify-items: normal !important;
    }
    &-inherit {
      justify-items: inherit !important;
    }
  }

  &-self {
    &-start {
      justify-self: start !important;
    }
    &-end {
      justify-self: end !important;
    }
    &-flex-start {
      justify-self: flex-start !important;
    }
    &-flex-end {
      justify-self: flex-end !important;
    }
    &-self-start {
      justify-self: self-start !important;
    }
    &-self-end {
      justify-self: self-end !important;
    }
    &-left {
      justify-self: left !important;
    }
    &-right {
      justify-self: right !important;
    }
    &-center {
      justify-self: center !important;
    }
    &-baseline {
      justify-self: baseline !important;
    }
    &-stretch {
      justify-self: stretch !important;
    }
    &-normal {
      justify-self: normal !important;
    }
    &-inherit {
      justify-self: inherit !important;
    }
  }
}

.align {
  &-content {
    &-start {
      align-content: start !important;
    }
    &-end {
      align-content: end !important;
    }
    &-flex-start {
      align-content: flex-start !important;
    }
    &-flex-end {
      align-content: flex-end !important;
    }
    &-center {
      align-content: center !important;
    }
    &-stretch {
      align-content: stretch !important;
    }
    &-normal {
      align-content: normal !important;
    }
    &-space-between {
      align-content: space-between !important;
    }
    &-space-around {
      align-content: space-around !important;
    }
    &-space-evenly {
      align-content: space-evenly !important;
    }
    &-inherit {
      align-content: inherit !important;
    }
  }
  &-items {
    &-start {
      align-items: start !important;
    }
    &-end {
      align-items: end !important;
    }
    &-flex-start {
      align-items: flex-start !important;
    }
    &-flex-end {
      align-items: flex-end !important;
    }
    &-center {
      align-items: center !important;
    }
    &-baseline {
      align-items: baseline !important;
    }
    &-stretch {
      align-items: stretch !important;
    }
    &-normal {
      align-items: normal !important;
    }
    &-inherit {
      align-items: inherit !important;
    }
  }

  &-self {
    &-start {
      align-self: start !important;
    }
    &-end {
      align-self: end !important;
    }
    &-flex-start {
      align-self: flex-start !important;
    }
    &-flex-end {
      align-self: flex-end !important;
    }
    &-self-start {
      align-self: self-start !important;
    }
    &-self-end {
      align-self: self-end !important;
    }
    &-self-start {
      align-self: self-start !important;
    }
    &-self-end {
      align-self: self-end !important;
    }
    &-center {
      align-self: center !important;
    }
    &-baseline {
      align-self: baseline !important;
    }
    &-stretch {
      align-self: stretch !important;
    }
    &-normal {
      align-self: normal !important;
    }
    &-inherit {
      align-self: inherit !important;
    }
  }
}

/* FLEX */
.inline-flex {
  display: inline-flex !important;

  &-xs {
    @include br(xs) {
      display: inline-flex !important;
    }
  }

  &-sm {
    @include br(sm) {
      display: inline-flex !important;
    }
  }

  &-md {
    @include br(md) {
      display: inline-flex !important;
    }
  }

  &-lg {
    @include br(lg) {
      display: inline-flex !important;
    }
  }
}

.flex {
  display: flex !important;

  &-xs {
    @include flex(false, xs, true);
  }

  &-sm {
    @include flex(false, sm, true);
  }

  &-md {
    @include flex(false, md, true);
  }

  &-lg {
    @include flex(false, lg, true);
  }

  &-xl {
    @include flex(false, xl, true);
  }

  &-direction {
    &-row {
      flex-direction: row !important;
    }
    &-row-reverse {
      flex-direction: row-reverse !important;
    }
    &-column {
      flex-direction: column !important;
    }
    &-column-reverse {
      flex-direction: column-reverse !important;
    }
    &-inherit {
      flex-direction: inherit !important;
    }
  }

  &-wrap {
    flex-wrap: wrap !important;
  }

  &-nowrap {
    flex-wrap: nowrap !important;
  }

  &-wrap-reverse {
    flex-wrap: wrap-reverse !important;
  }

  &-wrap-inherit {
    flex-wrap: inherit !important;
  }

  @at-root #{& + '-1-1'},
    #{& + '-1-0'} {
    flex-grow: 1 !important;
  }

  @at-root #{& + '-1-1'},
    #{& + '-0-1'} {
    flex-shrink: 1 !important;
  }

  @at-root #{& + '-0-1'},
    #{& + '-0-0'} {
    flex-grow: 0 !important;
  }

  @at-root #{& + '-1-0'},
    #{& + '-1-0'} {
    flex-shrink: 0 !important;
  }
}

/* HIDEY CLASSES */
.only-lg {
  display: none !important;
}

.only-md {
  display: none !important;
}

.only-sm {
  display: none !important;
}

.only-xs {
  display: none !important;
}

@include breakpoint(lg) {
  .only-lg {
    display: block !important;
  }

  .hide-lg {
    display: none !important;
  }
}

@include breakpoint((md, md-max)) {
  .only-md {
    display: block !important;
  }

  .hide-md {
    display: none !important;
  }
}

@include breakpoint((sm, sm-max)) {
  .only-sm {
    display: block !important;
  }

  .hide-sm {
    display: none !important;
  }
}

@include breakpoint(xs-max) {
  .only-xs {
    display: block !important;
  }

  .hide-xs {
    display: none !important;
  }
}

.only-mobile {
  display: none !important;
}

.only-nonmobile {
  display: none !important;
}
.pointer-reference:not(:hover):not(:focus):not(.focus):not(:active):not(.active):not(.open)
  .hide-idle,
.pointer-reference:hover .only-idle,
.pointer-reference:focus .only-idle,
.pointer-reference.focus .only-idle,
.pointer-reference:active .only-idle,
.pointer-reference.active .only-idle,
.pointer-reference.open .only-idle,
.pointer-reference:hover .only-not-hover,
.pointer-reference:hover .hide-hover,
.pointer-reference:not(:hover) .only-hover,
.pointer-reference:not(:hover) .hide-not-hover,
.pointer-reference:focus .only-not-focus,
.pointer-reference:focus .hide-focus,
.pointer-reference:not(:focus):not(.focus) .only-focus,
.pointer-reference:not(:focus):not(.focus) .hide-not-focus,
.pointer-reference.active .only-not-active,
.pointer-reference:active .only-not-active,
.pointer-reference.active .hide-active,
.pointer-reference:active .hide-active,
.pointer-reference:not(:active):not(.active) .only-active,
.pointer-reference:not(:active):not(.active) .hide-not-active,
.pointer-reference.active .only-not-toggle,
.pointer-reference.open .only-not-toggle,
.pointer-reference.active .hide-toggle,
.pointer-reference.open .hide-toggle,
.pointer-reference:not(.active):not(.open) .only-toggle,
.pointer-reference:not(.active):not(.open) .hide-not-toggle {
  display: none !important;
}

@include breakpoint(#{$mobile-br-max}-max) {
  .only-mobile {
    display: block !important;
  }

  .hide-mobile {
    display: none !important;
  }
}

@include breakpoint(#{$mobile-br-max-polar}) {
  .only-nonmobile {
    display: block !important;
  }

  .hide-nonmobile {
    display: none !important;
  }
}

.sr-only {
  @include dump-styles(hide-js-friendly);
}

.cf {
  @include dump-styles(cf);
}

.disabled {
  @include dump-styles(disabled);
}

.radius {
  & {
    @include create-corner-helper(
      #{&},
      '',
      'border',
      'radius',
      $border-radius-base,
      'for-radius',
      ''
    );
    @include create-corner-helper(
      #{&},
      'small',
      'border',
      'radius',
      $border-radius-small,
      'for-radius',
      'small'
    );
    @include create-corner-helper(
      #{&},
      'large',
      'border',
      'radius',
      $border-radius-large,
      'for-radius',
      'large'
    );
  }

  &-ellipse {
    border-radius: 50% !important;
  }
}

.no-radius {
  @include create-corner-helper(#{&}, '', 'border', 'radius', 0, 'for-no-radius', '');
}

.no-shadow {
  @include dump-styles(no-box-shadow-important);
}

.fit-image {
  &-cover {
    position: relative;
    @include dump-styles(fit-image-cover);
  }
  &-contain {
    position: relative;
    @include dump-styles(fit-image-contain);
  }
}
