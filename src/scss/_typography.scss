$fwc-body-heading-size: (
  $body-size-h1,
  $body-size-h2,
  $body-size-h3,
  $body-size-h4,
  $body-size-h5,
  $body-size-h6
);

:is(.special-primary) {
  @include type-set(
    (
      root-size: $body-font-size,
      size: $special-primary-font-size,
      leading: $special-primary-line-height,
      color: $special-primary-color,
      weight: $special-primary-font-weight,
      style: $special-primary-font-style,
      case: $special-primary-text-transform,
    )
  );
  margin-bottom: rem($special-primary-gutter-y, $body-font-size);
  margin-top: rem($special-primary-gutter-y, $body-font-size);
  display: block;

  @include on-breakpoint(mobile) {
    @include type($special-primary-font-size-mobile, null, $body-font-size);
  }
}

:is(.special-secondary) {
  @include type-set(
    (
      root-size: $body-font-size,
      size: $special-secondary-font-size,
      leading: $special-secondary-line-height,
      color: $special-secondary-color,
      weight: $special-secondary-font-weight,
      style: $special-secondary-font-style,
      case: $special-secondary-text-transform,
    )
  );
  margin-bottom: rem($special-secondary-gutter-y, $body-font-size);
  margin-top: rem($special-secondary-gutter-y, $body-font-size);
  display: block;

  @include on-breakpoint(mobile) {
    @include type($special-secondary-font-size-mobile, null, $body-font-size);
  }
}

:is(.lead) {
  @include type-set(
    (
      root-size: $body-font-size,
      size: $lead-font-size,
      leading: $lead-line-height,
      color: $lead-color,
      weight: $lead-font-weight,
      style: $lead-font-style,
      case: $lead-text-transform,
    )
  );
  margin-bottom: rem($lead-gutter-y, $body-font-size);
  margin-top: rem($lead-gutter-y, $body-font-size);
  display: block;

  @include on-breakpoint(mobile) {
    @include type($lead-font-size-mobile, null, $body-font-size);
  }
}

/* heading */
:where(h1, h2, h3, h4, h5, h6),
:is(.h1, .h2, .h3, .h4, .h5, .h6) {
  @include type-set(
    (
      font: $body-heading-font-family,
      color: $body-heading-color,
      leading: $body-heading-line-height,
      weight: $body-heading-font-weight,
      style: $body-heading-font-style,
      case: $body-heading-text-transform,
    )
  );
  display: block;
  hyphens: auto;
  margin-bottom: rem($body-heading-gutter-bottom, $body-font-size);
  margin-top: rem($body-heading-gutter-top, $body-font-size);

  @at-root .alert :where(&) {
    color: inherit;
  }
}

@for $i from 1 through length($fwc-body-heading-size) {
  :where(h#{$i}),
  :is(.h#{$i}) {
    @include type(nth($fwc-body-heading-size, $i), null, $body-font-size);
  }
}

/* OTHER SHIT */

:where(strong, b) {
  // font-family: '';
  font-weight: $body-font-weight-bold;
}

:where(em, i) {
  font-style: italic;
}

:where(a) {
  transition-duration: $body-anchor-transition-duration;
  transition-timing-function: $body-anchor-transition-timing;
  transition-property: color;
  transition: $body-anchor-transition-duration color $body-anchor-transition-timing;
  text-decoration: $body-anchor-text-decoration;
  color: var(--fw-body-anchor-color);

  &:where(:hover, :focus, .focus) {
    text-decoration: $body-anchor-text-decoration-hover;
    color: var(--fw-body-anchor-color-hover);
  }

  @at-root :is(.disabled, [disabled], :disabled) {
    --fw-body-anchor-color-hover: var(--fw-body-anchor-color);
  }
}

:where(p, ul, ol, address, pre, dl),
:is(.p) {
  margin-bottom: $var-body-text-gutter;
  display: block;
}

:where(li, dl, dt):is(:nth-child(n + 2)),
:where(li) :where(ul, ol) {
  margin-top: em($body-list-margin-y, $body-font-size);
}

:where(ol, ul, dd) {
  padding-left: em($body-list-offset, $body-font-size);
}

:where(ol, ul) {
  list-style-type: revert;

  &:is(.unstyled, .inline) {
    :where(ul, ol, li) {
      padding-left: 0;
      margin-top: 0;
    }
  }

  &:is(.unstyled, .inline, .style-none) {
    :is(li):before {
      content: none !important;
    }
  }

  &:is(.inline) {
    :is(li) {
      display: inline-block;
      &:is(:nth-child(n + 2)) {
        margin-left: rem($body-list-offset-inline, $body-font-size);
      }
    }
  }

  @at-root :where(li) {
    list-style-type: inherit;
    position: relative;

    // margin-bottom: em(20px / $content-font-size);
    // padding-left: calc(var(fw-body-list-offset) * -1);

    &::marker {
      font-size: 1em;
      color: $body-list-bullet-color;

      .alert & {
        color: inherit;
        opacity: 0.5;
      }
    }
  }

  :where(li) & {
    margin-bottom: 0;
  }
}

:where(ul) {
  // &,
  &:is(.style-disc) {
    list-style-type: disc;
  }
  &:is(.style-circle) {
    list-style-type: circle;
  }
  &:is(.style-square) {
    list-style-type: square;
  }
}

:where(ol) {
  &:is(.style-decimal) {
    list-style-type: decimal;
  }
  &:is(.style-decimal-leading-zero) {
    list-style-type: decimal-leading-zero;
  }
  &:is(.style-lower-alpha) {
    list-style-type: lower-alpha;
  }
  &:is(.style-lower-roman) {
    list-style-type: lower-roman;
  }
  &:is(.style-upper-alpha) {
    list-style-type: upper-alpha;
  }
  &:is(.style-upper-roman) {
    list-style-type: upper-roman;
  }
}

:where(blockquote) {
  @include type-set(
    (
      root-size: $body-font-size,
      size: $body-blockquote-font-size,
      leading: $body-blockquote-line-height,
      weight: $body-blockquote-font-weight,
      style: $body-blockquote-font-style,
      case: $body-blockquote-text-transform,
    )
  );

  padding-left: rem($body-blockquote-padding-x, $body-font-size);
  padding-right: rem($body-blockquote-padding-x, $body-font-size);
  margin-bottom: rem($body-blockquote-margin-y, $body-font-size);
  margin-top: rem($body-blockquote-margin-y, $body-font-size);
  padding-bottom: rem($body-blockquote-padding-y, $body-font-size);
  padding-top: rem($body-blockquote-padding-y, $body-font-size);
  border-left: $body-blockquote-border-width solid $body-blockquote-border-color;

  & > :where(*) {
    font-size: inherit;
    line-height: inherit;

    &:is(:last-child) {
      margin-bottom: 0;
    }
  }

  .alert & {
    border-left-color: currentColor;
  }
}

%code-styles {
}

:where(pre, code, kbd, tt) {
  font: inherit;
  @include type-set(
    (
      font: $var-font-monospace,
      color: $body-mono-color,
    )
  );
  background: $body-mono-background;
}

:where(code, kbd, tt) {
  padding: rem($body-mono-inline-padding, $body-font-size);
}

:where(pre) {
  padding: rem($body-mono-block-padding, $body-font-size);
  overflow: auto;

  * {
    border: 0;
    margin: 0;
    padding: 0;
  }
}

:where(cite) {
  @include type-set(
    (
      size: $body-cite-font-size,
      weight: $body-cite-font-weight,
      style: $body-cite-font-style,
    )
  );

  :where(blockquote) & {
    display: block;
    margin-top: $var-body-text-gutter;
  }
}

/* obscure fucks I can fuck with myself */
:where(q) {
  font-style: italic;
}

:where(del, strike) {
  text-decoration: line-through;
}

:where(ins) {
  text-decoration: underline;
}
:where(sup, sub) {
  font-size: 0.75em;
}
:where(sup) {
  vertical-align: top;
}
:where(sub) {
  vertical-align: bottom;
}
:where(var) {
  font-style: italic;
  font-family: $var-font-secondary;
}

:where(hr) {
  display: block;
  border: 0;
  height: rem($hr-height, $body-font-size);
  background: $hr-color;
  opacity: 0.2;
  width: 100%;
  flex: 1 1 auto;
  margin-top: rem($hr-gutter-y, $body-font-size);
  margin-bottom: rem($hr-gutter-y, $body-font-size);
  margin-left: auto;
  margin-right: auto;
}

:where(small) {
  font-size: $var-body-font-size-small;
}

:where(big) {
  font-size: $var-body-font-size-large;
}
