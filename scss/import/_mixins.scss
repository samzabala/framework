/*** MIXINS + FUNCTIONS + extends ***/

@function internal-is-convertable($value,$font-value: $body-font-size) {
	
	@if type-of($value) == number and unit($value) == px and unit($font-value) == px {
		@return true;
	}@else{
		@return false;
	}
}

@mixin create-box-helper($selector-prefix,$selector-suffix:'',$property:'',$tag:'',$value:'',$extend-prefix:'',$extend-suffix:''){
	$parsed-tag:'';

	@if($tag != ''){
		$parsed-tag: #{'-'+$tag};
	}

	$parsed-selector-suffix:'';

	@if($selector-suffix != ''){
		$parsed-selector-suffix: #{'-'+$selector-suffix};
	}



	$parsed-extend-suffix:'';

	@if($extend-suffix != ''){
		$parsed-extend-suffix: #{'-'+$extend-suffix};
	}



	@if($extend-prefix != '') {
		@at-root %#{$extend-prefix} {
			&-top#{$parsed-extend-suffix} {
				#{$property}-top#{$parsed-tag}: $value!important;
			}
			&-bottom#{$parsed-extend-suffix} {
				#{$property}-bottom#{$parsed-tag}: $value!important;
			}
			&-right#{$parsed-extend-suffix} {
				#{$property}-right#{$parsed-tag}: $value!important;
			}
			&-left#{$parsed-extend-suffix} {
				#{$property}-left#{$parsed-tag}: $value!important;
			}

			&-x#{$parsed-extend-suffix}  {

				@extend %#{$extend-prefix}-left#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-right#{$parsed-extend-suffix} !optional;
			}

			
			&-y#{$parsed-extend-suffix}  {

				@extend %#{$extend-prefix}-left#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-right#{$parsed-extend-suffix} !optional;
			}

			& {
				@extend %#{$extend-prefix}-top#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-bottom#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-right#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-left#{$parsed-extend-suffix} !optional;
			}


		}
	}

	@at-root #{$selector-prefix}{
		#{$property}#{$parsed-tag}: $value!important;
		
			&,
			&-y,
			&-top#{$parsed-selector-suffix} {
				@if($extend-prefix != '') {
					@extend %#{$extend-prefix}-top#{$parsed-extend-suffix} !optional;
				}@else{
					#{$property}-top#{$parsed-tag}: $value!important;
				}
			}
			&,
			&-y,
			&-bottom#{$parsed-selector-suffix} {
				@if($extend-prefix != '') {
					@extend %#{$extend-prefix}-bottom#{$parsed-extend-suffix} !optional;
				}@else{
					#{$property}-bottom#{$parsed-tag}: $value!important;
				}
			}
			&,
			&-x,
			&-left#{$parsed-selector-suffix} {
				@if($extend-prefix != '') {
					@extend %#{$extend-prefix}-left#{$parsed-extend-suffix} !optional;
				}@else{
					#{$property}-left#{$parsed-tag}: $value!important;
				}
			}
			&,
			&-x,
			&-right#{$parsed-selector-suffix} {
				@if($extend-prefix != '') {
					@extend %#{$extend-prefix}-right#{$parsed-extend-suffix} !optional;
				}@else{
					#{$property}-right#{$parsed-tag}: $value!important;
				}
			}
		}
}

@mixin create-corner-helper($selector-prefix,$selector-suffix:'',$property:'',$tag:'',$value:'',$extend-prefix:'',$extend-suffix:''){
	$parsed-tag:'';

	@if($tag != ''){
		$parsed-tag: #{'-'+$tag};
	}

	$parsed-selector-suffix:'';

	@if($selector-suffix != ''){
		$parsed-selector-suffix: #{'-'+$selector-suffix};
	}



	$parsed-extend-suffix:'';

	@if($extend-suffix != ''){
		$parsed-extend-suffix: #{'-'+$extend-suffix};
	}

	@if($extend-prefix != '') {
		@at-root %#{$extend-prefix} {
			&-top-left#{$parsed-extend-suffix} {
				#{$property}-top-left#{$parsed-tag}: $value!important;
			}
			&-top-right#{$parsed-extend-suffix} {
				#{$property}-top-right#{$parsed-tag}: $value!important;
			}
			&-bottom-left#{$parsed-extend-suffix} {
				#{$property}-bottom-left#{$parsed-tag}: $value!important;
			}
			&-bottom-right#{$parsed-extend-suffix} {
				#{$property}-bottom-right#{$parsed-tag}: $value!important;
			}

			&-top#{$parsed-extend-suffix}  {
				@extend %#{$extend-prefix}-top-left#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-top-right#{$parsed-extend-suffix} !optional;
			}

			
			&-bottom#{$parsed-extend-suffix}  {
				@extend %#{$extend-prefix}-bottom-left#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-bottom-right#{$parsed-extend-suffix} !optional;
			}


			&-right#{$parsed-extend-suffix}  {
				@extend %#{$extend-prefix}-top-right#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-bottom-right#{$parsed-extend-suffix} !optional;
			}

			&-left#{$parsed-extend-suffix}  {
				@extend %#{$extend-prefix}-top-left#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-bottom-left#{$parsed-extend-suffix} !optional;
			}
			
			& {
				@extend %#{$extend-prefix}-top-left#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-top-right#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-bottom-left#{$parsed-extend-suffix} !optional;
				@extend %#{$extend-prefix}-bottom-right#{$parsed-extend-suffix} !optional;
			}
		}
	}



	@at-root #{$selector-prefix}{
		&#{$parsed-selector-suffix},
		&-top#{$parsed-selector-suffix},
		&-left#{$parsed-selector-suffix},
		&-top-left#{$parsed-selector-suffix} {
			@if($extend-prefix != '') {
				@extend %#{$extend-prefix}-top-left#{$parsed-extend-suffix}!optional;
			}@else{
				#{$property}-top-left#{$parsed-tag}: $value!important;
			}
		}
		&#{$parsed-selector-suffix},
		&-top#{$parsed-selector-suffix},
		&-right#{$parsed-selector-suffix},
		&-top-right#{$parsed-selector-suffix} {
			@if($extend-prefix != '') {
				@extend %#{$extend-prefix}-top-right#{$parsed-extend-suffix}!optional;
			}@else{
				#{$property}-top-right#{$parsed-tag}: $value!important;
			}
		}

		&#{$parsed-selector-suffix},
		&-bottom#{$parsed-selector-suffix},
		&-right#{$parsed-selector-suffix},
		&-bottom-right#{$parsed-selector-suffix} {
			@if($extend-prefix != '') {
				@extend %#{$extend-prefix}-bottom-right#{$parsed-extend-suffix}!optional;
			}@else{
				#{$property}-bottom-right#{$parsed-tag}: $value!important;
			}
		}

		&#{$parsed-selector-suffix},
		&-bottom#{$parsed-selector-suffix},
		&-left#{$parsed-selector-suffix},
		&-bottom-left#{$parsed-selector-suffix} {
			@if($extend-prefix != '') {
				@extend %#{$extend-prefix}-bottom-left#{$parsed-extend-suffix}!optional;
			}@else{
				#{$property}-bottom-left#{$parsed-tag}: $value!important;
			}
		}
	}
}

// for colors with hover and shit
@mixin create-palette-helper($tag,$property:'', $value:'',$value-inverse: '') {

	
	@at-root
	#{$tag},
	.theme-inverse #{$tag}-inverse,
	#{$tag}-hover:hover,
	#{$tag}-focus:focus,
	#{$tag}-active:active,

	// #{$tag}-hover:hover:not(.open):not(.active),
	// #{$tag}-focus:focus:not(.open):not(.active),
	// #{$tag}-active:active:not(.open):not(.active),

	#{$tag}-focus.focus,
	#{$tag}-active.active,
	#{$tag}-toggle.active,
	#{$tag}-toggle.open {
		
		@if $property != '' {
			
			@if $value != '' {
				#{$property}: #{$value}!important;
			}

			@if $value-inverse != '' {
				
				.theme-inverse & {
					#{$property}: #{$value-inverse}!important;
				}
				
			}
		}

		@content;

	}
}




@mixin button-generate-schemes($args:(),$scheme:''){
	$defaults: (
		init: (
			border: '',
			background: '',
			color: '',
		),
		hover: (
			border: '',
			background: '',
			color: '',
		),
		active: (
			border: '',
			background: '',
			color: '',
		)
	);
	$opts: map-merge($defaults,$args);


	@each $state,$properties in $opts {

		@if $state == 'hover' {
			
		
			@at-root &:hover,
			#{$prefix}-group#{$prefix}-group-unite:hover &,
			
			&:focus,
			#{$prefix}-group#{$prefix}-group-unite:focus &,

			&.focus,
			#{$prefix}-group#{$prefix}-group-unite.focus & {
				@include internal-btn-set-scheme($properties)
			}
			// @at-root &:hover,
			// &:focus,
			// &:.focus {
			//     @include internal-btn-set-scheme($properties)
			// }

		}@else if $state == 'active' {
			@at-root &:active,
			#{$prefix}-group#{$prefix}-group-unite:active &,

			&.active,
			#{$prefix}-group#{$prefix}-group-unite.active & {
				@include internal-btn-set-scheme($properties);
			}
			
		}@else if $state == 'init' {
			@at-root %extend-internal-btn-init-#{$scheme} {
				@include internal-btn-set-scheme($properties);
			}


			@at-root &,
			&#{$prefix}-no-interaction,
			&#{$prefix}-disabled,
			#{$prefix}-disabled & {
				@extend %extend-internal-btn-init-#{$scheme};
			}
		
		@at-root 
			&#{$prefix}-no-interaction:hover,
			&#{$prefix}-no-interaction:focus,
			&#{$prefix}-no-interaction.focus,
			&#{$prefix}-no-interaction:active,
			&#{$prefix}-no-interaction.active,

			&#{$prefix}-disabled:hover,
			&#{$prefix}-disabled:focus,
			&#{$prefix}-disabled.focus,
			&#{$prefix}-disabled:active,
			&#{$prefix}-disabled.active,
			
			#{$prefix}-disabled:hover &,
			#{$prefix}-disabled:focus &,
			#{$prefix}-disabled.focus &,
			#{$prefix}-disabled:active &,
			#{$prefix}-disabled.active &
			{
				@extend %extend-internal-btn-init-#{$scheme};
			}
		}
	}

}

@mixin internal-btn-set-scheme($properties,$add-important: false) {


	$important: '';

	@if $add-important {

		$important: '!important';
	}

	@if map-get($properties,border) {
		border-color: map-get($properties,border) #{$important};
	}

	@if map-get($properties,background) {
		background-color: map-get($properties,background) #{$important};
	}

	@if map-get($properties,color) {
		color: map-get($properties,color) #{$important};
	}

}

@function internal-btn-calculate-disabled($color){
	@if type-of($color) == 'color' and $color != transparent {
		@return rgba( $color,$global-disabled-opacity );
	}@else {
		@return $color;
	}
}