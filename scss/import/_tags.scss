/*** Tags ***/
//internal
$calculated-tag-font-size: $tag-font-size;
@if internal-is-convertable($tag-font-size) {
    $calculated-tag-font-size: em($tag-font-size / $body-font-size)
}

$calculated-tag-line-height: type-lead( $tag-font-size,$tag-line-height );

$calculated-tag-single-line: $calculated-tag-line-height;
@if unitless($calculated-tag-single-line) and unit($tag-font-size) == px {
    $calculated-tag-single-line: 1em * #{ type-lead( $tag-font-size,$tag-line-height ) }
}

$calculated-tag-height: $tag-height;
@if internal-is-convertable($tag-height,$tag-font-size) {
    $calculated-tag-height: em($tag-height/$tag-font-size)
}
$calculated-tag-gutter-x: $tag-gutter-x;
@if internal-is-convertable($tag-gutter-x,$tag-font-size) {
    $calculated-tag-gutter-x: $calculated-tag-gutter-x
}


$prefix: '.tag';
#{$prefix} {
	@include type-set((
		size: $calculated-tag-font-size,
		leading: $calculated-tag-line-height,
		weight: $tag-font-weight,
		style: $tag-font-style,
		case: $tag-text-transform,
	));
	padding-top: calc(  (  (#{$calculated-tag-height} - (#{ $calculated-tag-single-line }) ) * .5 ));
	padding-bottom: calc(  (  (#{$calculated-tag-height} - (#{ $calculated-tag-single-line }) ) * .5 ));
	padding-left: $calculated-tag-gutter-x;
	padding-right: $calculated-tag-gutter-x;
	border-radius: $tag-border-radius;
	display:inline-block;
	vertical-align:middle;


	&,
	&:hover,
	&:focus,
	&:active,
	&.focus,
	&.active {

		color: $tag-color;
	}

	@each $tag,$color in $calculated-brand-color-declarations {
		&-#{$tag} {
			@extend %for-background-#{$tag};
		}
	}

	&-intensity {
		@for $i from 1 through length($calculated-color-brand-intensity) {
			&-#{$i} {
				@extend %for-background-intensity-#{$i};
			}
		}
	}
}