/*** BADGE ***/

$calculated-badge-size: $badge-size;
@if internal-is-convertable($badge-size) {
    $calculated-badge-size: rem($badge-size / $body-font-size)
}


$calculated-badge-size-small:  $badge-size-small;
@if internal-is-convertable($badge-size-small) {
    $calculated-badge-size-small: rem($badge-size-small / $body-font-size)
}
$calculated-badge-size-large: $badge-size-large;
@if internal-is-convertable($badge-size-large) {
    $calculated-badge-size-large: rem($badge-size-large / $body-font-size)
}


$calculated-badge-border-width: $badge-border-width;
@if internal-is-convertable($badge-border-width) {
    $calculated-badge-border-width: rem($badge-border-width / $body-font-size)
}


$prefix: '.badge';
#{$prefix} {
	display:inline-block;
	vertical-align: middle;
    flex: 0 0 auto; //retain dimensions
	line-height: inherit;
	width: $calculated-badge-size;
	height: $calculated-badge-size;
	border-radius: calc(#{$calculated-badge-size} * .5);
	border: $calculated-badge-border-width solid $badge-border-color;
	box-shadow: $badge-box-shadow;

	.theme-inverse & {
		border-color: $badge-border-color-inverse;
	}

	&#{&}-large {
		width: $calculated-badge-size-large;
		height: $calculated-badge-size-large;
		border-radius: calc(#{$calculated-badge-size-large} * .5);
	}
	&#{&}-small {
		width: $calculated-badge-size-small;
		height: $calculated-badge-size-small;
		border-radius: calc(#{$calculated-badge-size-small} * .5);
	}


	@each $tag,$color in $calculated-brand-color-declarations {
		&-#{$tag} {
			@extend %for-background-#{$tag};
		}
	}

	&-intensity {
		@for $i from 1 through length($calculated-color-brand-intensity) {
			&-#{$i} {
				@extend %for-background-intensity-#{$i};
			}
		}
	}

}