
//internal vars
$calculated-input-font-size: $input-font-size;
@if internal-is-convertable($input-font-size) {
    $calculated-input-font-size: rem($input-font-size / $body-font-size)
}

    $calculated-input-font-size-large: $input-font-size-large;
    @if internal-is-convertable($input-font-size-large) {
        $calculated-input-font-size-large: rem($input-font-size-large / $body-font-size)
    }

    $calculated-input-font-size-small: $input-font-size-small;
    @if internal-is-convertable($input-font-size-small) {
        $calculated-input-font-size-small: rem($input-font-size-small / $body-font-size)
    }


	$calculated-input-label-font-size: $input-label-font-size;
	@if internal-is-convertable($input-label-font-size) {
		$calculated-input-label-font-size: rem($input-label-font-size / $body-font-size)
	}
	
		$calculated-input-label-font-size-large: $input-label-font-size-large;
		@if internal-is-convertable($input-label-font-size-large) {
			$calculated-input-label-font-size-large: rem($input-label-font-size-large / $body-font-size)
		}
	
		$calculated-input-label-font-size-small: $input-label-font-size-small;
		@if internal-is-convertable($input-label-font-size-small) {
			$calculated-input-label-font-size-small: rem($input-label-font-size-small / $body-font-size)
		}


$calculated-input-line-height: type-lead( $input-font-size,$input-line-height );

	$calculated-input-label-line-height: type-lead( $input-label-font-size,$input-label-line-height );

$calculated-input-single-line: $calculated-input-line-height;
@if unitless($calculated-input-single-line) and unit($input-font-size) == px {
    $calculated-input-single-line: 1em * #{ type-lead( $input-font-size,$input-line-height ) }
}

	$calculated-input-label-single-line: $calculated-input-label-line-height;
	@if unitless($calculated-input-label-single-line) and unit($input-label-font-size) == px {
		$calculated-input-label-single-line: 1em * #{ type-lead( $input-label-font-size,$input-label-line-height ) }
	}

$calculated-input-height: $input-height;
@if internal-is-convertable($input-height){
    $calculated-input-height: rem($input-height/$body-font-size);
}

// @error $calculated-input-height;

    $calculated-input-height-large: $input-height-large;
    @if internal-is-convertable($input-height-large){
        $calculated-input-height-large: rem($input-height-large/$body-font-size);
    }

    $calculated-input-height-small: $input-height-small;
    @if internal-is-convertable($input-height-small){
        $calculated-input-height-small: rem($input-height-small/$body-font-size);
	}


	

$calculated-input-gutter-x: $input-gutter-x;
@if internal-is-convertable($input-gutter-x,$input-font-size) {
    $calculated-input-gutter-x: em($input-gutter-x / $input-font-size)
}@else if internal-is-convertable($input-gutter-x){
	$calculated-input-gutter-x: rem($input-gutter-x/$body-font-size);
}
//info

$calculated-input-info-font-size: $input-info-font-size;
@if internal-is-convertable($input-info-font-size) {
	$calculated-input-info-font-size: rem($input-info-font-size / $body-font-size)
}

$calculated-input-info-line-height: type-lead( $input-info-font-size,$input-info-line-height );


$calculated-input-info-gutter-y: $input-info-gutter-y;
@if internal-is-convertable($input-info-gutter-y) {
	$calculated-input-info-gutter-y: em($input-info-gutter-y / $input-info-font-size)
}



/*** input ***/


/* input clasees */
$prefix: '.input';


#{$prefix} {


	
	@at-root %for-form-input-and-label {

		transition: $transition-duration-short color $transition-timing, $transition-duration-short border $transition-timing, $transition-duration-short box-shadow $transition-timing;
		max-width:100%;

		&#{$prefix}-disabled,
		&[disabled] {

			opacity: $global-disabled-opacity!important;
			cursor: not-allowed!important;
			// background-color: $input-background-disabled;

			// .theme-inverse & {
			// 	background-color: $input-background-disabled-inverse;
			// }
		}
	}

		&,
		&-label{
			@extend %for-form-input-and-label;
		}

	@at-root %for-form-input-class {
		font: inherit;
		color:inherit;
		vertical-align: middle;
		background-color: $input-background;
		transition: $transition-duration-short color $transition-timing, $transition-duration-short border $transition-timing, $transition-duration-short box-shadow $transition-timing;
		max-width:100%;

		&:focus {
			outline: none;
			box-shadow: $input-box-shadow-focus;
		}

		.theme-inverse & {
			background-color: $input-background-inverse;
		}

		&#{$prefix}-large,
		#{$prefix}-group#{$prefix}-large & {
			font-size: $calculated-input-font-size-large;
		}

		&#{$prefix}-small,
		#{$prefix}-group#{$prefix}-small & {
			font-size: $calculated-input-font-size-small;
		}
	}

		& { //scaffold
			@extend %for-form-input-class;
		}




	@at-root %for-form-label {
		@include type-set((
			size: #{$calculated-input-label-font-size},
			color:$input-label-color,
			leading: $calculated-input-label-line-height ,
			weight: $input-label-font-weight,
			style: $input-label-font-style,
			font: $input-label-font-family,
			align:inherit,
			decoration:none,
			case: $input-label-text-transform,
		));
		order:-1;
		padding-right: 1rem;
		display:inline-block;
		padding-top: calc( (#{ $calculated-input-height } - (#{$calculated-input-label-single-line}) ) * .5 );
		padding-bottom: calc( (  #{ $calculated-input-height } - (#{$calculated-input-label-single-line}) ) * .5 );

		&#{$prefix}-large,
		#{$prefix}-large & {
			font-size: $calculated-input-font-size-large;
			padding-top: calc(   (#{ $calculated-input-height-large } - (#{$calculated-input-label-single-line}) ) * .5 );
			padding-bottom: calc(  (#{ $calculated-input-height-large } - (#{$calculated-input-label-single-line}) ) * .5 );
		}

		&#{$prefix}-small,
		#{$prefix}-small & {
			font-size: $calculated-input-font-size-small;
			padding-top: calc(  (#{$calculated-input-height-small} - (#{$calculated-input-label-single-line}) ) * .5 );
			padding-bottom: calc(  (#{$calculated-input-height-small} - (#{$calculated-input-label-single-line}) ) * .5 );
		}

		.theme-inverse & {
			color:$input-label-color-inverse;
		}
	}

		&-label {
			@extend %for-form-label;	
		}

	&-info {
		@include type-set((
			size: $calculated-input-info-font-size,
			leading: $calculated-input-info-line-height,
			color: $input-info-color,
			weight:$input-info-font-weight,
			style: $input-info-font-style,
			case: $input-info-text-transform,
		));
		margin-top:$calculated-input-info-gutter-y;
		margin-bottom:$calculated-input-info-gutter-y;
		display:block;

		order: 3;

		#{$prefix}-wrapper-horizontal & {
			width: calc(100% - #{$input-label-horizontal-width});
			align-self: flex-end;
			margin-left: auto;
		}
	}

	&-inline {
		vertical-align: middle;
		display:inline-block;
		margin-right: .5em;
	}

	//shitstorm 
	@at-root %for-form-input-boxy {

		-webkit-appearance: none;
		appearance: none;
		outline:none;
		@include type-set((
			size: #{$calculated-input-font-size},
			color:$input-color,
			leading: #{ $calculated-input-line-height } ,
			weight: $input-font-weight,
			style: $input-font-style,
			font: $input-font-family,
			align:inherit,
			decoration:none,
			case: $input-text-transform,
		));
		display:inline-block;
		background-color: $input-background;
		border: $input-border-width solid $input-border-color;
		padding-right: $calculated-input-gutter-x;
		padding-left: $calculated-input-gutter-x;
		padding-top: calc(  (  (#{ $calculated-input-height } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
		padding-bottom: calc(  (  (#{ $calculated-input-height } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );

		.theme-inverse & {
			color:$input-color-inverse;
			background-color: $input-background-inverse;
		}
		
		option {
			font:inherit;
			outline:none;
		}


		#{$prefix}-group & {
			box-shadow: none;
		}

		#{$prefix}-wrapper & {
			display: block;
			flex: 1 1;
			order: 2;
		}

		&::-webkit-input-placeholder {
			color: inherit;
			opacity: $input-placeholder-opacity;
		}
		
		&::-moz-placeholder {
			color: inherit;
			opacity: $input-placeholder-opacity;
		}
		
		&:-ms-input-placeholder{
			color: inherit;
			opacity: $input-placeholder-opacity;
		}
		&:-moz-placeholder { /* Firefox 18- */
			color: inherit;
			opacity: $input-placeholder-opacity;
		}

		

		&[type=color] {
			min-width:100px;
			padding: .5em;
		}

		//file
			&::-webkit-file-upload-button {
				appearance: none;
				border: none;
				font:inherit;
				color:inherit;
				opacity: $input-placeholder-opacity;
				background: none;
				margin: 0;
				padding: 0;
				vertical-align:middle;
				display:flex;
			}
			// &::-webkit-file-upload-text {
			// 	-webkit-appearance: none;
			// }
		
		// &:focus::-webkit-input-placeholder {
		// 	color: transparent !important;
		// }
		
		// &:focus:-moz-placeholder {
		// 	color: transparent !important;
		// }
		
		// &:focus:-ms-input-placeholder{
		// 	color: transparent !important;
		// }

		
		// &.focus::-webkit-input-placeholder {
		// 	color: transparent !important;
		// }
		
		// &.focus:-moz-placeholder {
		// 	color: transparent !important;
		// }
		
		// &.focus:-ms-input-placeholder{
		// 	color: transparent !important;
		// }

		.nav & {
			border-radius: 0 !important;
			padding-top: calc(  (  (#{ $calculated-nav-height } - (#{$input-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{ $calculated-nav-height } - (#{$input-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			height: #{ $calculated-nav-height };

			&:not(.focus):not(:focus) {
				box-shadow:none;
			}

		}

		&:focus,
		&.focus {
			box-shadow: $input-box-shadow-focus;
			border-color: $input-border-color-focus;
		}

		&#{$prefix}-large,
		#{$prefix}-group#{$prefix}-large & {
			padding-top: calc(  (  (#{ $calculated-input-height-large } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{ $calculated-input-height-large } - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
		}

		&#{$prefix}-small,
		#{$prefix}-group#{$prefix}-small & {
			padding-top: calc(  (  (#{$calculated-input-height-small} - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{$calculated-input-height-small} - (#{$input-border-width} * 2)) - (#{$calculated-input-single-line}) ) * .5 );
		}
	}

		&-select,
		&-single-line,
		&-multiple-line,
		&-editor {
			@extend %for-form-input-boxy;
		}

	




	@at-root %for-form-input-boxy-and-group {

		border-radius: $input-border-radius;
		box-shadow: $input-box-shadow;

		.nav & {
			border-radius: 0 !important;

			&:not(.focus):not(:focus) {
				box-shadow:none;
			}

		}

		&#{$prefix}-no-radius {
			border-radius: 0!important;
		}

		&#{$prefix}-no-shadow {
			box-shadow:none!important;
		}
	}

	&-select,
	&-single-line,
	&-multiple-line,
	&-editor,
	&-group {
		@extend %for-form-input-boxy-and-group;
	}

	@at-root %for-form-input-boxy-single{

		height: $calculated-input-height;
		vertical-align: middle;

		&#{$prefix}-large,
		#{$prefix}-large & {
			height: $calculated-input-height-large;
		}

		&#{$prefix}-small,
		#{$prefix}-small & {
			height: $calculated-input-height-small;
		}
	}

		&-single-line {
			@extend %for-form-input-boxy-single;
		}

	@at-root %for-form-input-boxy-multiple{

		vertical-align: top;
		max-height:100%;
		overflow-y: auto;

		option {
			padding-right: $calculated-input-gutter-x;
			padding-left: $calculated-input-gutter-x;
			margin-right: $calculated-input-gutter-x * -1;
			margin-left: $calculated-input-gutter-x * -1;
		}

		&-height {
			min-height: $calculated-input-height * $input-height-multiple-factor;

			&#{$prefix}-large,
			#{$prefix}-large & {
				height: $calculated-input-height-large * $input-height-multiple-factor;
			}
	
			&#{$prefix}-small,
			#{$prefix}-small & {
				height: $calculated-input-height-small * $input-height-multiple-factor;
			}

		}
	}

		&-select[multiple],
		&-multiple-line {
			@extend %for-form-input-boxy-multiple;
		}

		&-multiple-line {
			@extend %for-form-input-boxy-multiple-height;
		}

	&-multiple-line {
		display:block;
		
	}


	
	@at-root %for-form-input-boxy-select {

		background-image:
			linear-gradient(-130deg, $input-select-dropdown-color 0%, $input-select-dropdown-color 50%, transparent 51%, transparent 100%),
			linear-gradient(130deg, $input-select-dropdown-color 0%, $input-select-dropdown-color 50%, transparent 51%, transparent 100%)
			;
		background-size:
			#{$calculated-symbol-caret-width * .5} $calculated-symbol-caret-height,
			#{$calculated-symbol-caret-width * .5} $calculated-symbol-caret-height
			;
		background-position:
			calc(100% - (1em + #{$calculated-symbol-caret-width * .425} )) 50%,
			calc(100% - 1em) 50%
			;
		background-repeat: no-repeat,no-repeat;

		&:not([multiple]) {
			padding-right: $calculated-input-gutter-x * 2;
		}
		@at-root select#{&}[multiple] {
			background-image: none;
		}
	}

		&-select {
			@extend %for-form-input-boxy-select;
		}



	@at-root %for-form-wrapper {
		& {
			max-width:100%;
			position:relative;

			@include br($mobile-br-max-polar){
				display:inline-flex;
				padding-right: 2rem;
			}
		}
			

		&-horizontal {
			@include br($mobile-br-max-polar){
				flex-direction: row;
				align-items: flex-start;
			
				&#{$prefix}-wrapper-block & {
					%for-form-input-boxy {
						width: calc(100% - #{$input-label-horizontal-width});
					}
				}
				// flex-wrap: wrap;

				> #{$prefix}-label {
					flex-grow:0;
					flex-shrink:0;
					flex-basis:auto;
					order: -1;
					

					&:first-child:last-child {
					/* labels that typically wrapp radio and checboxes*/
						flex: 1 1 auto;
					}

					@at-root #{$prefix}-wrapper-block#{&} {
						flex-basis:$input-label-horizontal-width;
					}
				}
			}
			
		}

		&-vertical {
			@include br($mobile-br-max-polar){
				flex-direction: column;
			}
		}

		&-block {

			display:flex;
			padding-right: 0;

			@include br(#{$mobile-br-max}-max) {
				flex-direction: column;

				%for-form-input-boxy {
					width:100%;
				}
			}

		}
	}

		&-wrapper {
			& {
				@extend %for-form-wrapper;
			}
				

			&#{&}-horizontal {
				@extend %for-form-wrapper-horizontal;
				
			}

			&#{&}-vertical {
				@extend %for-form-wrapper-vertical;
			}

			&#{&}-block {

				
				@extend %for-form-wrapper-block;
			}
		}


	&-group {
		display:inline-flex;
        position:relative;
		max-width:100%;
		padding:0;
		border:0;
		overflow-x:auto;
		overflow-y:visible;
		
		#{$prefix} {
			position:relative;
			resize:none;
			max-width:100%;

			&:not(:focus):not(.focus) {
				border-color:transparent;
			}

			&:hover,
			&:active,
			&.active,
			&:focus,
			&.focus,
			&.open {
				z-index:1;
			}
		}
        
        &-block {
            display:flex;
			width:100%;

			> #{$prefix},
			> .trumbowyg,
			> .btn:not(.btn-symbol) {
				flex: 1 1;
			}

			&-mobile {
				@include br(#{$mobile-br-max}-max) {
					display:flex;
					width:100%;

					.btn:not(.btn-symbol) {
						flex: 1 1;
					}
				}
			}
        }
		

        &#{&}-large {
            border-radius: $input-border-radius-large;
        }

        &#{&}-small {
            border-radius: $input-border-radius-small;
        }

        &#{&}-horizontal {
            

            &:not(#{$prefix}-group-responsive) {

				> #{$prefix},.btn, .trumbowyg {
					&:nth-last-child(n+2) {
						border-top-right-radius: 0!important;
						border-bottom-right-radius: 0!important;
					}
				}

				> #{$prefix},.btn, .trumbowyg {
					&:nth-child(n+2) {
						border-top-left-radius: 0!important;
						border-bottom-left-radius: 0!important;

						&:not(:focus):not(.focus) {
							border-left-color: $input-group-separator-color;
						}
					}
				}
            }
        }

        &#{&}-vertical {
			flex-direction:column;
			
			> .btn-symbol {
				width:auto;
			}

			> #{$prefix},.btn, .trumbowyg {
				&:nth-last-child(n+2) {
					border-bottom-right-radius: 0!important;
					border-bottom-left-radius: 0!important;
				}
			}

			> #{$prefix},.btn, .trumbowyg {
				&:nth-child(n+2) {
					border-top-right-radius: 0!important;
					border-top-left-radius: 0!important;

					&:not(:focus):not(.focus) {
						border-top-color: $input-group-separator-color;
					}
				}
            }
        }

        &#{&}-responsive {

			@include br($mobile-br-max-polar){
				
				&#{$prefix}-group-horizontal {
					> .btn-symbol {
						width:auto;
					}

					> #{$prefix},.btn, .trumbowyg {
						&:nth-last-child(n+2) {
							border-top-right-radius: 0!important;
							border-bottom-right-radius: 0!important;
						}
					}

					> #{$prefix},.btn, .trumbowyg {
						&:nth-child(n+2) {
							border-top-left-radius: 0!important;
							border-bottom-left-radius: 0!important;

							&:not(:focus):not(.focus) {
								border-left-color: $input-group-separator-color;
							}
						}
					}
				}
				
			}

			@include br(#{$mobile-br-max}-max) {
				width:100%;
				
				flex-wrap:wrap;
				display:flex;
				flex-direction:column;

				> #{$prefix},.btn, .trumbowyg {
					&:nth-last-child(n+2) {
						border-bottom-right-radius: 0!important;
						border-bottom-left-radius: 0!important;
					}
				}
	
				> #{$prefix},.btn, .trumbowyg {
					&:nth-child(n+2) {
						border-top-right-radius: 0!important;
						border-top-left-radius: 0!important;
		
						&:not(:focus):not(.focus) {
							border-top-color: $input-group-separator-color;
						}
					}
				}
			}
        }
	}



	

	//color
	@each $tag,$color in $calculated-brand-color-declarations {

		@at-root %for-form-label-color-#{$tag} {
			color: $color;
		}
			//label
			@at-root #{$prefix}-label#{$prefix}-#{$tag},
			#{$prefix}-#{$tag} #{$prefix}-label {
				@extend %for-form-label-color-#{$tag};
			}

		@at-root %for-form-input-color-#{$tag} {
			& {
		
				color: $color;
				box-shadow: $input-box-shadow-brand-basis $color;
				border-color: $color;
				
				@if type-of($color) == color && $color != transparent {
					background-color: rgba($color,.05);
				}
			}
		}
			//inputs
			@at-root &#{$prefix}-#{$tag},
			#{$prefix}-#{$tag} &  {
				@extend %for-form-input-color-#{$tag};
			}
	}
}




.special-form,
fieldset {
	padding: $special-form-gutter-y $special-form-gutter-x;
	position:relative;
	margin-bottom: #{$special-form-gutter-y};
	// overflow:hidden;

	&,
	legend,
	.special-form-label {
		background: $special-form-background;
		border-radius: $special-form-border-radius;

		.theme-inverse & {
			background: $special-form-background-inverse;
		}
	}
	
	legend,
	.special-form-label {
		padding: ($special-form-gutter-y * .75) $special-form-gutter-x 0;
		margin-left: $special-form-gutter-x * -1;
		position:relative;
		top: -1em;
		border-bottom-right-radius: 0;
		border-bottom-left-radius: 0;
	}


	#{$prefix}-wrapper {
		max-width: none;
		display:flex;
		padding-right:0;

		&-horizontal {
			#{$prefix},
			#{$prefix}-single-line,
			#{$prefix}-multiple-line,
			#{$prefix}-select,
			#{$prefix}-inline {
				margin-left:0;
				margin-right:0;
				padding-left:0;
				padding-right:0;
			}
		}

		&:nth-last-child(n+2) {
			border-bottom: 1px solid gray;
		}
	}

	#{$prefix},
	#{$prefix}-single-line,
	#{$prefix}-multiple-line,
	#{$prefix}-select,
	#{$prefix}-inline,
	.fw-trumbowyg-editor,
	.fw-trumbowyg-textarea {
		background-color:transparent!important;
		outline: none!important;
		border-color: transparent!important;
		box-shadow: none !important;
	}

	#{$prefix}-single-line,
	#{$prefix}-multiple-line,
	#{$prefix}-select,
	#{$prefix}-inline,
	.fw-trumbowyg-editor,
	.fw-trumbowyg-textarea {
		background-color:transparent;
		// width:calc(100% + (#{$special-form-gutter-x} * 2));
		max-width:none;
		padding-left: 0;
		padding-right:0;
		// margin-left: $special-form-gutter-x * -1;
		// margin-right:$special-form-gutter-x * -1;
		border-radius:0!important;
	}

	.btn:last-child {
		position:absolute;
		top:100%;
		right:0;
		margin-top:$special-form-gutter-y;
	}
}