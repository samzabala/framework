$calculated-tabs-font-size: $tabs-font-size;
@if internal-is-convertable($tabs-font-size) {
	$calculated-tabs-font-size: rem($tabs-font-size / $body-font-size);
}


$calculated-tabs-item-height: $tabs-item-height;
@if internal-is-convertable($tabs-item-height,$btn-font-size) {
	$calculated-tabs-item-height: em($tabs-item-height/$btn-font-size)
}@else if internal-is-convertable($tabs-item-height){
	$calculated-tabs-item-height: rem($tabs-item-height/$body-font-size);
}

$prefix: '.tab';



	

%for-tab {
	&-elements {
		display: flex;
	}

	&-padding {
		
		padding-top: calc(  (  (#{ $calculated-tabs-item-height } - (#{$tabs-item-border-width} * 2)) - (#{$calculated-tabs-font-size * $calculated-body-line-height}) ) * .5 );
		padding-bottom: calc(  (  (#{ $calculated-tabs-item-height } - (#{$tabs-item-border-width} * 2)) - (#{$calculated-tabs-font-size * $calculated-body-line-height}) ) * .5 );
		min-height:$calculated-tabs-item-height;
		padding-right:$tabs-item-gutter-x;
		padding-left:$tabs-item-gutter-x;
		align-items:center;
	}
} 

#{$prefix} {
	&s {
		@include type-set((

			size:$calculated-tabs-font-size,
			// leading: strip-unit($tabs-line-height/$tabs-font-size),
			case: $tabs-text-transform,
			weight: $tabs-font-weight,
			style: $tabs-font-style,
			color: $tabs-color
		));
		border-bottom: $tabs-border-width solid $tabs-border-color;

		.theme-inverse & {
			color: $tabs-color-inverse;
			border-color:  $tabs-border-color-inverse;
		}

		&#{&}-responsive {
			@include br(#{$mobile-br-max}-max) {
				flex-direction:column;

				#{$prefix},
				#{$prefix}s li {
					border-bottom: $tabs-border-width solid $tabs-border-color!important;


					&:nth-child(n+2) {
						margin-left: 0;
						border-top: 0;
						border-top-right-radius: 0;
						border-top-left-radius: 0;
					}
				}
			}
		}
	}


	&,
	&s,
	> li {
		@extend %for-tab-elements;
		padding: 0;
		margin: 0;
	}

	&,
	&s > li {
		@extend %for-tab-padding;
		border:0;
		position:relative;
		background-color: $tabs-item-background;
		border-top-right-radius: $tab-item-border-radius;
		border-top-left-radius: $tab-item-border-radius;
		border: $tabs-item-border-width solid $tabs-item-border-color;
		border-bottom:0;

		.theme-inverse & {
			background-color: $tabs-item-background-inverse;
			border-color: $tabs-item-border-color-inverse;
		}


		&#{$prefix}-disabled {
			@extend %for-disabled;

			* {
				pointer-events: none;
			}
		}

		&:not(#{$prefix}-disabled) {

			&:active,
			&.active,
			&:hover,
			&:focus,
			&.focus {
				background-color: $tabs-item-background-active;
				border-color: $tabs-item-border-color-active;
				color: $tabs-item-color-active;

				&:after {
					height: $tabs-current-height;
				}
	
				.theme-inverse & {
	
					background-color: $tabs-item-background-active-inverse;
					border-color: $tabs-item-border-color-active-inverse;
					color: $tabs-item-color-active-inverse;
				}
			}
		}
		&:nth-child(n+2) {
			margin-left: $tabs-item-margin-x;
		}

		&:before {
			content:none;
		}

		&:after {
			content:"";
			display:block;
			position:absolute;
			pointer-events:none;
			left:0;
			right:0;
			bottom:0;
			height: 0;
			background: $tabs-current-color;
			transition: $tabs-transition-duration height $transition-timing;


			.theme-inverse & {
				background: $tabs-current-color-inverse;
			}
		}

		> a,
		#{$prefix}-text {
			@extend %for-tab-elements;
			@extend %for-tab-padding;
			color:inherit;
			margin-top: calc(  (  (#{ $calculated-tabs-item-height } - (#{$tabs-item-border-width} * 2)) - (#{$calculated-tabs-font-size * $calculated-body-line-height}) ) * -.5 );
			margin-bottom: calc(  (  (#{ $calculated-tabs-item-height } - (#{$tabs-item-border-width} * 2)) - (#{$calculated-tabs-font-size * $calculated-body-line-height}) ) * -.5 );
			margin-right:$tabs-item-gutter-x * -1;
			margin-left:$tabs-item-gutter-x * -1;
			flex: 1 1;
			align-self:stretch;
		}
	}
}