
/*** HELPERS ***/

/* BACKGROUND CLASSES */


// extend for elements that needs backgrounds so we can extend with responsibility
	%for{

		&-border-color {
			@each $tag,$color in $calculated-brand-color-declarations-for-helpers {
				&-#{$tag} {
					border-color: $color ;
				}
	
				&-#{$tag}-important {
					border-color: $color !important;
				}
			}

			&-intensity {
				@for $i from 1 through length($calculated-color-brand-intensity) {
					&-#{$i} {
						border-color: nth($calculated-color-brand-intensity,$i);
	
						&-important {
							border-color: nth($calculated-color-brand-intensity,$i) !important;
						}
					}
				}
			}
		}

		&-background {
			@each $tag,$color in $calculated-brand-color-declarations-for-helpers {
				&-#{$tag} {
					background-color: $color ;
				}
	
				&-#{$tag}-important {
					background-color: $color !important;
				}
			}

			&-intensity {
				@for $i from 1 through length($calculated-color-brand-intensity) {
					&-#{$i} {
						background-color: nth($calculated-color-brand-intensity,$i);
	
						&-important {
							background-color: nth($calculated-color-brand-intensity,$i) !important;
						}
					}
				}
			}



			&-image-none-important {
				background-image: none!important;
			}
	
			&-gradient {
	
				& {
					@include gradient((
						color1: $var-gradient-start,
						color2: $var-gradient-end,
						angle: 0deg,
						use-shorthand:false,
					));
	
					&-important {
						@include gradient((
							color1: $var-gradient-start,
							color2: $var-gradient-end,
							angle: 0deg,
							use-shorthand:false,
							add-important: true
						));
					}
				}
	
				@each $angle in $calculated-gradient-angles {
					&-#{$angle} {
						@include gradient((
							color1: $var-gradient-start,
							color2: $var-gradient-end,
							angle: to-unit($angle,deg),
							use-shorthand:false,
						));
					}
					
					&-#{$angle}-important {
						@include gradient((
							color1: $var-gradient-start,
							color2: $var-gradient-end,
							angle: to-unit($angle,deg),
							use-shorthand:false,
							add-important: true
						));
					}
				}
			}
		}
	}



	$prefix: '.border';
	#{$prefix} {
		&-color {
	
			// Theme
			@include create-palette-helper(
				#{&}-theme,
				border-color,
				$var-theme-color
			);


			// Theme Contrast
			@include create-palette-helper(
				#{&}-theme-contrast,
				border-color,
				$var-theme-color-contrast
			);


			// Theme Polar 
			@include create-palette-helper(
				#{&}-theme-polar,
				border-color,
				$var-theme-background
			);


			// Theme Contrast Polar 
			@include create-palette-helper(
				#{&}-theme-polar-contrast,
				border-color,
				$var-theme-background-contrast
			);
	
			//intensity
			&-intensity {
				@for $i from 1 through length($calculated-color-brand-intensity) {
					@include create-palette-helper(
						#{&}-#{$i}
					){
						@extend %for-border-color-intensity-#{$i}-important !optional;
					};
				}
			}

			//inherit
			@include create-palette-helper(
				#{&}-inherit,
				border-color,
				inherit
			);
	
			//transparent
			@include create-palette-helper(
				#{&}-transparent,
				border-color,
				transparent
			);
	
			//color tag
			@each $tag,$color in $calculated-brand-color-declarations-for-helpers {
				
				@include create-palette-helper(
					#{&}-#{$tag}
				){
					@extend %for-border-color-#{$tag}-important;
				};
			}
	
		}



		&-style {
			@include create-box-helper(#{&+'-none'},'',border,'style',none);
			@include create-box-helper(#{&+'-hidden'},'',border,'style',hidden);
			@include create-box-helper(#{&+'-dotted'},'',border,'style',dotted);
			@include create-box-helper(#{&+'-dashed'},'',border,'style',dashed);
			@include create-box-helper(#{&+'-solid'},'',border,'style',solid);
			@include create-box-helper(#{&+'-double'},'',border,'style',double);
			@include create-box-helper(#{&+'-groove'},'',border,'style',groove);
			@include create-box-helper(#{&+'-ridge'},'',border,'style',ridge);
			@include create-box-helper(#{&+'-inset'},'',border,'style',inset);
			@include create-box-helper(#{&+'-outset'},'',border,'style',outset);
			@include create-box-helper(#{&+'-initial'},'',border,'style',initial);
			@include create-box-helper(#{&+'-inherit'},'',border,'style',inherit);
			@include create-box-helper(#{&+'-unset'},'',border,'style',unset);
		}

		&-width {

			@include create-box-helper(#{&+'-thin'},'',border,'width',thin);
			@include create-box-helper(#{&+'-medium'},'',border,'width',medium);
			@include create-box-helper(#{&+'-thick'},'',border,'width',thick);
			@include create-box-helper(#{&+'-initial'},'',border,'width',initial);
			@include create-box-helper(#{&+'-inherit'},'',border,'width',inherit);
			@include create-box-helper(#{&+'-unset'},'',border,'width',unset);
		}
	}


	$prefix: '.background';
	#{$prefix} {


		&-image-none {
			@include create-palette-helper(
				#{&}
			){
				@extend %for-background-image-none-important !optional;
			};
		}

		// Theme
		@include create-palette-helper(
			#{&}-theme,
			background-color,
			$var-theme-background
		);


		// Theme Contrast
		@include create-palette-helper(
			#{&}-theme-contrast,
			background-color,
			$var-theme-background-contrast
		);


		// Theme Polar 
		@include create-palette-helper(
			#{&}-theme-polar,
			background-color,
			$var-theme-color
		);


		// Theme Contrast Polar 
		@include create-palette-helper(
			#{&}-theme-polar-contrast,
			background-color,
			$var-theme-color-contrast
		);

		//intensity
		&-intensity {
			@for $i from 1 through length($calculated-color-brand-intensity) {
				@include create-palette-helper(
					#{&}-#{$i}
				){
					@extend %for-background-intensity-#{$i}-important !optional;
				};
			}
		}

		//gradient
		&-gradient {
			@extend %for-background-gradient-important !optional;

			$calculated-gradient-selector: #{&};

			@each $angle in $calculated-gradient-angles {
				$calculated-gradient-selector:  #{ $calculated-gradient-selector ', '+ & +'-' + $angle };
			}

			@at-root #{$calculated-gradient-selector} {
				background-color: $var-gradient-start!important;
			}

			@each $angle in $calculated-gradient-angles {

				@include create-palette-helper(
					#{&}-#{$angle}
				){
					@extend %for-background-gradient-#{$angle}-important !optional;
				};

			}
			
		}

		//inherit
		@include create-palette-helper(
			#{&}-inherit,
			background-color,
			inherit
		);

		//transparent
		@include create-palette-helper(
			#{&}-transparent,
			background-color,
			transparent
		);

		//color tag
		@each $tag,$color in $calculated-brand-color-declarations-for-helpers {
			
			@include create-palette-helper(
				#{&}-#{$tag}
			){
				@extend %for-background-#{$tag}-important;
			};
		}
	}

/* COLOR CLASSES */
	%for{
		&-color {
			&-intensity {
				@for $i from 1 through length($calculated-color-brand-intensity) {
					&-#{$i} {
						color: nth($calculated-color-brand-intensity,$i);

						&-important {
							color: nth($calculated-color-brand-intensity,$i) !important;
						}
					}
				}
			}

			@each $tag,$color in $calculated-brand-color-declarations-for-helpers {
				&-#{$tag} {
					color: $color;

					&-important {
						color: $color !important;
					}
				}
			}
		}
	}
	
	$prefix: '.color';
	#{$prefix} {

		// Theme
		@include create-palette-helper(
			#{&}-theme,
			color,
			$var-theme-color
		);


		// Theme Contrast
		@include create-palette-helper(
			#{&}-theme-contrast,
			color,
			$var-theme-color-contrast
		);


		// Theme Polar 
		@include create-palette-helper(
			#{&}-theme-polar,
			color,
			$var-theme-background
		);


		// Theme Contrast Polar 
		@include create-palette-helper(
			#{&}-theme-polar-contrast,
			color,
			$var-theme-background-contrast
		);

		//intensity
		&-intensity {
			@for $i from 1 through length($calculated-color-brand-intensity) {
				@include create-palette-helper(
					#{&}-#{$i}
				){
					@extend %for-color-intensity-#{$i}-important;
				};
			}
		}

		//inherit
		@include create-palette-helper(
			#{&}-inherit,
			color,
			inherit
		);

		

		//color tag
		@each $tag,$color in $calculated-brand-color-declarations-for-helpers {
			
			@include create-palette-helper(
				#{&}-#{$tag}
			){
				@extend %for-color-#{$tag}-important;
			};
		}
	}




.font{

	&-family {
		&-primary {
			font-family: $var-font-primary !important;
		}

		&-secondary {
			font-family: $var-font-secondary !important;
		}

		&-accent {
			font-family: $var-font-accent !important;
		}

		&-monospace {
			font-family: $var-font-monospace !important;
		}

		&-inherit {
			font-family: inherit !important;
		}
	}

	&-size {
		&-large {
			font-size: rem($calculated-body-size-large)!important;
		}
		&-small {
			font-size: rem($calculated-body-size-small)!important;
		}
		&-normalize {
			font-size: 1rem!important;
		}
		&-inherit {
			font-size: inherit!important;
		}
	}

	&-weight {

		&-100 {
			font-weight: 100!important;
		}
		&-200 {
			font-weight: 200!important;
		}
		&-300 {
			font-weight: 300!important;
		}
		&-400 {
			font-weight: 400!important;
		}
		&-500 {
			font-weight: 500!important;
		}
		&-600 {
			font-weight: 600!important;
		}
		&-700 {
			font-weight: 700!important;
		}
		&-800 {
			font-weight: 800!important;
		}
		&-900 {
			font-weight: 900!important;
		}
		&-inherit {
			font-weight: inherit!important;
		}

	}

	&-style {
		&-italic {
			font-style: italic!important;
		}
		&-oblique {
			font-style: oblique!important;
		}
		&-normal {
			font-style: normal!important;
		}
		&-inherit {
			font-style: inherit!important;
		}
	}
}


	.display {
		&-block {
			display:block!important;
		}
		&-inline-block {
			display:inline-block!important;
		}
		&-inline {
			display:inline!important;
		}
		@at-root %for-display-none {
			display:none!important;
		}
		&-none {
			@extend %for-display-none;
		}
	}



	/* TEXT CLASSES */
	$prefix: '.text';
	#{$prefix}{

		&-leading {
			
			&-compact {
				line-height: $calculated-body-line-height * $body-line-height-compact-factor!important;
			}
			
			&-expanded {
				line-height: $calculated-body-line-height * $body-line-height-expanded-factor!important;
			}
			
			&-normalize {
				line-height: $calculated-body-line-height!important;
			}
			
			&-inherit {
				line-height: inherit!important;
			}
			
			&-whole {
				line-height: 1!important;
			}
		}
		

		&-align {
			&-center {
				text-align: center!important;
			}
			&-left {
				text-align: left!important;
			}
			&-right {
				text-align: right!important;
			}
			&-justify {
				text-align: justify!important;
			}
			&-inherit {
				text-align: inherit!important;
			}
		}
		

		&-decoration {
			&-none {
				text-decoration: none!important;
			}
			&-line {
				&-underline {
					text-decoration-line: underline!important;
				}
				&-line-through {
					text-decoration-line: line-through!important;
				}
				&-overline {
					text-decoration-line: overline!important;
				}
			}
			&-style {
				&-solid {
					text-decoration-style: solid!important;
				}
				&-wavy {
					text-decoration-style: wavy!important;
				}
				&-double {
					text-decoration-style: double!important;
				}
				&-wavy {
					text-decoration-style: wavy!important;
				}
			}
		}

		&-transform {
			&-uppercase {
				text-transform: uppercase!important;
			}
			&-lowercase {
				text-transform: lowercase!important;
			}
			&-capitalize {
				text-transform: capitalize!important;
			}
			&-inherit {
				text-transform: inherit!important;
			}

			&-none {
				text-transform: none!important;
			}
		}

		&-vertical-align {
			&-middle {
				vertical-align:middle!important;
			}
			&-baseline {
				vertical-align:baseline!important;
			}
			&-top {
				vertical-align:top!important;
			}
			&-bottom {
				vertical-align:bottom!important;
			}
			&-text-top {
				vertical-align:text-top!important;
			}
			&-text-bottom {
				vertical-align:text-bottom!important;
			}
			&-sub {
				vertical-align:sub!important;
			}
			&-super {
				vertical-align:super!important;
			}
			&-inherit {
				vertical-align:inherit!important;
			}
		}

		&-nowrap {

			white-space: nowrap!important;
		}

		&-wrap {

			white-space: normal!important;

			&-break {
				word-break: break-word!important;
				overflow-wrap: break-word!important;
			}

			@at-root %for-text-ellipsis  {
				&-single {
					/* cut overflowing single line to ellipsis */
					white-space: nowrap!important;
					overflow: hidden!important;
					text-overflow: ellipsis!important;
				}
			}

			&-ellipsis {
				@extend %for-text-ellipsis-single;
				/* gotta be block otherwise shit wont happen */
				display:block;
				max-width:100%!important;

				&-multiple {
					overflow: hidden!important;
					text-overflow: ellipsis!important;
					display: -webkit-box!important;
					-webkit-line-clamp: $body-ellipsis-multiple-factor!important;
					-webkit-box-orient: vertical!important;
					height: calc((#{$calculated-body-single-line}) * #{$body-ellipsis-multiple-factor});

					#{$prefix}-leading-compact &,
					&#{$prefix}-leading-compact {
						height: calc((#{$calculated-body-single-line} * #{$body-line-height-compact-factor}) * #{$body-ellipsis-multiple-factor});
					}
					#{$prefix}-leading-expanded &,
					&#{$prefix}-leading-expanded {
						height: calc((#{$calculated-body-single-line} * #{$body-line-height-expanded-factor}) * #{$body-ellipsis-multiple-factor});
					}
				}
			}
		}

		&-clip-background {
			@supports not (-webkit-background-clip: text) {
				background: transparent!important;
				color: $var-color-primary!important;
			}

			@supports (-webkit-background-clip: text) {
				-webkit-background-clip: text!important;
				-webkit-text-fill-color: transparent!important;
			}
		}
	}





//box model resets
	.no-border {
		border:0!important;

		&-x {
			border-left:0!important;
			border-right:0!important;
		}


		&-y {
			border-top:0!important;
			border-bottom:0!important;
		}

		&-top {
			border-top:0!important;
		}

		&-bottom {
			border-bottom:0!important;
		}

		&-left {
			border-left:0!important;
		}

		&-right {
			border-right:0!important;
		}
	}

	.no-margin {
		@include create-box-helper(#{&},'',margin,'',0,'for-no-margin');
	}

	.margin-auto {
		@include create-box-helper(#{&},'',margin,'',auto,'for-margin-auto');
	}


	.no-padding {
		@include create-box-helper(#{&},'',padding,'',0,'for-no-padding');
	}

%for-no-scrollbar {
	scrollbar-width: none;

	&::-webkit-scrollbar {
		display:none;
	}
}

.no-scrollbar {
	@extend %for-no-scrollbar;
}

.overflow {

	&{
		&-visible {
			overflow:visible!important;
		}
		&-hidden {
			overflow:hidden!important;
		}
		&-scroll {
			overflow:scroll!important;
		}
		&-overlay {
			overflow:scroll!important;
			overflow:overlay!important;
		}
		&-auto {
			overflow:auto!important;
		}
	}

	&-x {
		
		&-visible {
			overflow-x:visible!important;
		}
		&-hidden {
			overflow-x:hidden!important;
		}
		&-scroll {
			overflow-x:scroll!important;
		}
		&-overlay {
			overflow-x:scroll!important;
			overflow-x:overlay!important;
		}
		&-auto {
			overflow-x:auto!important;
		}
	}

	&-y {
		
		&-visible {
			overflow-y:visible!important;
		}
		&-hidden {
			overflow-y:hidden!important;
		}
		&-scroll {
			overflow-y:scroll!important;
		}
		&-overlay {
			overflow-y:scroll!important;
			overflow-y:overlay!important;
		}
		&-auto {
			overflow-y:auto!important;
		}
	}
}

//posesetyen
.position {
	&-relative {
		position:relative!important;
	}
	&-static {
		position:static!important;
	}
	&-absolute {
		position:absolute!important;
	}
	&-fixed {
		position:fixed!important;
	}
	&-sticky {
		position:sticky!important;
	}
}

.offset {

	&,
	&-y,
	&-top{
		&-0 {
			top: 0;
		}
		&-auto {
			top: auto;
		}
	}

	&,
	&-y,
	&-bottom{
		&-0 {
			bottom: 0;
		}
		&-auto {
			bottom: auto;
		}
	}


	&,
	&-x,
	&-left{
		&-0 {
			left: 0;
		}
		&-auto {
			left: auto;
		}
	}

	&,
	&-x,
	&-right{
		&-0 {
			right: 0;
		}
		&-auto {
			right: auto;
		}
	}
}

.float {
	&-left {
		float: left!important;
	}
	&-right {
		float: right!important;
	}
	&-none {
		float: none!important;
	}
	&-inherit {
		float: inherit!important;
	}
}



.clear {
	&-left {
		clear: left!important;
	}
	&-right {
		clear: right!important;
	}
	&-both {
		clear: both!important;
	}
	&-none {
		clear: none!important;
	}
	&-inherit {
		clear: inherit!important;
	}
}


// align and justify shit

	.justify {
		&-content {
			&-start {
				justify-content: start!important;
			}
			&-end {
				justify-content: end!important;
			}
			&-flex-start {
				justify-content: flex-start!important;
			}
			&-flex-end {
				justify-content: flex-end!important;
			}
			&-left {
				justify-content: left!important;
			}
			&-right {
				justify-content: right!important;
			}
			&-center {
				justify-content: center!important;
			}
			&-stretch {
				justify-content: stretch!important;
			}
			&-normal {
				justify-content: normal!important;
			}
			&-space-between {
				justify-content: space-between!important;
			}
			&-space-around {
				justify-content: space-around!important;
			}
			&-space-evenly {
				justify-content: space-evenly!important;
			}
			&-inherit {
				justify-content: inherit!important;
			}
		}

		&-items {
			&-start {
				justify-items: start!important;
			}
			&-end {
				justify-items: end!important;
			}
			&-flex-start {
				justify-items: flex-start!important;
			}
			&-flex-end {
				justify-items: flex-end!important;
			}
			&-self-start {
				justify-items: self-start!important;
			}
			&-self-end {
				justify-items: self-end!important;
			}
			&-left {
				justify-items: left!important;
			}
			&-right {
				justify-items: right!important;
			}
			&-center {
				justify-items: center!important;
			}
			&-baseline {
				justify-items: baseline!important;
			}
			&-stretch {
				justify-items: stretch!important;
			}
			&-normal {
				justify-items: normal!important;
			}
			&-inherit {
				justify-items: inherit!important;
			}
		}


		&-self {
			&-start {
				justify-self: start!important;
			}
			&-end {
				justify-self: end!important;
			}
			&-flex-start {
				justify-self: flex-start!important;
			}
			&-flex-end {
				justify-self: flex-end!important;
			}
			&-self-start {
				justify-self: self-start!important;
			}
			&-self-end {
				justify-self: self-end!important;
			}
			&-left {
				justify-self: left!important;
			}
			&-right {
				justify-self: right!important;
			}
			&-center {
				justify-self: center!important;
			}
			&-baseline {
				justify-self: baseline!important;
			}
			&-stretch {
				justify-self: stretch!important;
			}
			&-normal {
				justify-self: normal!important;
			}
			&-inherit {
				justify-self: inherit!important;
			}
		}
	}

	.align {

		&-content {
			&-start {
				align-content: start!important;
			}
			&-end {
				align-content: end!important;
			}
			&-flex-start {
				align-content: flex-start!important;
			}
			&-flex-end {
				align-content: flex-end!important;
			}
			&-center {
				align-content: center!important;
			}
			&-stretch {
				align-content: stretch!important;
			}
			&-normal {
				align-content: normal!important;
			}
			&-space-between {
				align-content: space-between!important;
			}
			&-space-around {
				align-content: space-around!important;
			}
			&-space-evenly {
				align-content: space-evenly!important;
			}
			&-inherit {
				align-content: inherit!important;
			}
		}
		&-items {
			&-start {
				align-items: start!important;
			}
			&-end {
				align-items: end!important;
			}
			&-flex-start {
				align-items: flex-start!important;
			}
			&-flex-end {
				align-items: flex-end!important;
			}
			&-center {
				align-items: center!important;
			}
			&-baseline {
				align-items: baseline!important;
			}
			&-stretch {
				align-items: stretch!important;
			}
			&-normal {
				align-items: normal!important;
			}
			&-inherit {
				align-items: inherit!important;
			}
		}
		
		&-self {
			&-start {
				align-self: start!important;
			}
			&-end {
				align-self: end!important;
			}
			&-flex-start {
				align-self: flex-start!important;
			}
			&-flex-end {
				align-self: flex-end!important;
			}
			&-self-start {
				align-self: self-start!important;
			}
			&-self-end {
				align-self: self-end!important;
			}
			&-self-start {
				align-self: self-start!important;
			}
			&-self-end {
				align-self: self-end!important;
			}
			&-center {
				align-self: center!important;
			}
			&-baseline {
				align-self: baseline!important;
			}
			&-stretch {
				align-self: stretch!important;
			}
			&-normal {
				align-self: normal!important;
			}
			&-inherit {
				align-self: inherit!important;
			}
		}
	}


/* FLEX */
.inline-flex {
	display:inline-flex!important;


	&-xs {
		@include br(xs) {
			display:inline-flex!important;
		}
	}
	
	&-sm {
		@include br(sm) {
			display:inline-flex!important;
		}
	}
	
	&-md {
		@include br(md) {
			display:inline-flex!important;
		}
	}
	
	&-lg {
		@include br(lg) {
			display:inline-flex!important;
		} 
	}
}

.flex {
	display:flex!important;

	&-xs {
		@extend %flex-xs;
	}
	
	&-sm {
		@extend %flex-sm;
	}
	
	&-md {
		@extend %flex-md;
	}
	
	&-lg {
		@extend %flex-lg;
	}

	&-direction {
		&-row {
			flex-direction: row!important;
		}
		&-row-reverse {
			flex-direction: row-reverse!important;
		}
		&-column {
			flex-direction: column!important;
		}
		&-column-reverse {
			flex-direction: column-reverse!important;
		}
		&-inherit {
			flex-direction: inherit!important;
		}
	}

	

	&-wrap {
		flex-wrap:wrap!important;
	}

	&-nowrap {
		flex-wrap:nowrap!important;
	}

	&-wrap-reverse {
		flex-wrap:wrap-reverse!important;
	}

	&-wrap-inherit {
		flex-wrap:inherit!important;
	}

	@at-root #{&+'-1-1'},
	#{&+'-1-0'} {
		flex-grow: 1!important;
	}

	@at-root #{&+'-1-1'},
	#{&+'-0-1'} {
		flex-shrink: 1!important;
	}

	@at-root #{&+'-0-1'},
	#{&+'-0-0'} {
		flex-grow: 0!important;
	}

	@at-root #{&+'-1-0'},
	#{&+'-1-0'} {
		flex-shrink: 0!important;
	}

}





/* HIDEY CLASSES */
.only-lg {
	display: none !important;
}

.only-md {
	display: none !important;
}

.only-sm {
	display: none !important;
}

.only-xs {
	display: none !important;
}

@include breakpoint(lg) {
	.only-lg {
		display: block !important;
	}
	
	.hide-lg {
		display:none!important;
	}
}

@include breakpoint((md,md-max)) {
	.only-md {
		display: block !important;
	}
	
	.hide-md {
		display:none!important;
	}
}

@include breakpoint((sm,sm-max)) {

	.only-sm {
		display: block !important;
	}
	
	.hide-sm {
		display:none!important;
	}
}

@include breakpoint(xs-max) {
	.only-xs {
		display: block !important;
	}
	
	.hide-xs {
		display:none!important;
	}
}



.only-mobile {
	display: none !important;
}


.only-nonmobile {
	display: none !important;
}
	.pointer-reference:not(:hover):not(:focus):not(.focus):not(:active):not(.active):not(.open) .hide-idle,
	.pointer-reference:hover .only-idle,
	.pointer-reference:focus .only-idle,
	.pointer-reference.focus .only-idle,
	.pointer-reference:active .only-idle,
	.pointer-reference.active .only-idle,
	.pointer-reference.open .only-idle,


	.pointer-reference:hover .only-not-hover,
	.pointer-reference:hover .hide-hover,
	.pointer-reference:not(:hover) .only-hover,
	.pointer-reference:not(:hover) .hide-not-hover,


	.pointer-reference:focus .only-not-focus,
	.pointer-reference:focus .hide-focus,
	.pointer-reference:not(:focus):not(.focus) .only-focus,
	.pointer-reference:not(:focus):not(.focus) .hide-not-focus,


	.pointer-reference.active .only-not-active,
		.pointer-reference:active .only-not-active,
	.pointer-reference.active .hide-active,
		.pointer-reference:active .hide-active,
	.pointer-reference:not(:active):not(.active) .only-active,
	.pointer-reference:not(:active):not(.active) .hide-not-active,


	.pointer-reference.active .only-not-toggle,
		.pointer-reference.open .only-not-toggle,
	.pointer-reference.active .hide-toggle,
		.pointer-reference.open .hide-toggle,
	.pointer-reference:not(.active):not(.open) .only-toggle,
	.pointer-reference:not(.active):not(.open) .hide-not-toggle

{
	display: none !important;
}



@include breakpoint(#{$mobile-br-max}-max) {

	.only-mobile {
		display: block !important;
	}
	
	.hide-mobile {
		display:none!important;
	}
}


@include breakpoint(#{$mobile-br-max-polar}) {

	.only-nonmobile {
		display: block !important;
	}
	
	.hide-nonmobile {
		display:none!important;
	}
}

.sr-only {
	@extend %for-display-none;
}

.cf {
	@extend %for-cf;
}




@at-root %for-disabled{
	cursor:not-allowed!important;
	opacity: $global-disabled-opacity;

	* {
		pointer-events:none;
	}
}

.disabled {
	@extend %for-disabled;
}


.radius {
	& {
		
		@include create-corner-helper(#{&},'','border','radius',$border-radius-base,'for-radius','');
		@include create-corner-helper(#{&},'small','border','radius',$border-radius-small,'for-radius','small');
		@include create-corner-helper(#{&},'large','border','radius',$border-radius-large,'for-radius','large');
	}

	&-ellipse {
		border-radius: 50%!important;
	}
}


.no-radius {
	@include create-corner-helper(#{&},'','border','radius',0,'for-no-radius','');
}

%for {
	&-no-shadow {
		box-shadow:none;

		&-important {
			box-shadow:none!important;
		}
	}
}


.no-shadow {
	@extend %for-no-shadow-important !optional;
}
