
/*** IMAGES ***/



/* LAZYLOAD */

$prefix: '.lazy';
#{$prefix},
*[data-src],
*[data-srcset] {
	opacity: 1;
	transition: $transition-duration-base opacity $transition-timing;
	html:not(.lazy-initialized) & {
		opacity: 0;
	}
}



/* SVGS */

$prefix: '.svg';
#{$prefix} {
	&-gradient {
		&-start {
			stop-color: $svg-gradient-color-start;
		}
		&-end {
			stop-color: $svg-gradient-color-end;
		}
	}
}


.fill {

	// Theme
	@include create-palette-helper(
		#{&}-theme,
		fill,
		$var-theme-color
	);


	// Theme Contrast
	@include create-palette-helper(
		#{&}-theme-contrast,
		fill,
		$var-theme-color-contrast
	);


	// Theme Polar 
	@include create-palette-helper(
		#{&}-theme-polar,
		fill,
		$var-theme-background
	);


	// Theme Contrast Polar 
	@include create-palette-helper(
		#{&}-theme-polar-contrast,
		fill,
		$var-theme-background-contrast
	);

	//intensity
	&-intensity {
		@for $i from 1 through length($calculated-color-brand-intensity) {
			@include create-palette-helper(
				#{&}-#{$i},
				fill,
				nth($calculated-color-brand-intensity,$i)
			);
		}
	}

	//current
	@include create-palette-helper(
		#{&}-currentColor,
		fill,
		currentColor
	);

	//none
	@include create-palette-helper(
		#{&}-none,
		fill,
		none
	);
	
	@each $tag,$color in $calculated-brand-color-declarations-for-components {
		@include create-palette-helper(
			#{&}-#{$tag},
			fill,
			$color
		);
	}

}



.stroke {
	// Theme
	@include create-palette-helper(
		#{&}-theme,
		stroke,
		$var-theme-color
	);


	// Theme Contrast
	@include create-palette-helper(
		#{&}-theme-contrast,
		stroke,
		$var-theme-color-contrast
	);


	// Theme Polar 
	@include create-palette-helper(
		#{&}-theme-polar,
		stroke,
		$var-theme-background
	);


	// Theme Contrast Polar 
	@include create-palette-helper(
		#{&}-theme-polar-contrast,
		stroke,
		$var-theme-background-contrast
	);

	//intensity
	&-intensity {
		@for $i from 1 through length($calculated-color-brand-intensity) {
			@include create-palette-helper(
				#{&}-#{$i},
				stroke,
				nth($calculated-color-brand-intensity,$i)
			);
		}
	}

	//current
	@include create-palette-helper(
		#{&}-currentColor,
		stroke,
		currentColor
	);

	//none
	@include create-palette-helper(
		#{&}-none,
		stroke,
		none
	);
	
	@each $tag,$color in $calculated-brand-color-declarations-for-components {
		@include create-palette-helper(
			#{&}-#{$tag},
			stroke,
			$color
		);
	}
}


/* FIT IMAGE */	

	/* emulate background cover on image tags */
	%for-fit-image {
		&-img {
			position:absolute!important;
			width: 100%!important;
			height: 100%!important;
			max-width:none!important;
			top:-50%!important;
			left:-50%!important;
			right:-50%!important;
			bottom:-50%!important;
			margin:auto!important;
			
		}

		&-contain {
			&-img {
				@extend %for-fit-image-img;
				object-fit: contain!important;
			}

			img {
				@extend %for-fit-image-contain-img;
			}
		}

		&-cover {
			&-img {
				@extend %for-fit-image-img;
				object-fit: cover!important;
			}

			img {
				@extend %for-fit-image-cover-img;
			}
		}
	}
	
	.fit-image {
		&-cover {
			position: relative;
			@extend %for-fit-image-cover;
		}
		&-contain {
			position: relative;
			@extend %for-fit-image-contain;
		}
}

