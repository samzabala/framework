
/*  BUTTONS ***/

//internal vars


// not the palettes good lord the design is a god
$calculated-btn-theme-relation: (
	theme : (
		color: $var-theme-background,
		background: $var-theme-color,
		border: transparent
	),

	theme-polar : (
		color: $var-theme-color,
		background: $var-theme-background,
		border: transparent
	),


	theme-outline : (
		color: $var-theme-color,
		background: transparent,
		border: $var-theme-color
	),

	theme-polar-outline : (
		color: $var-theme-background,
		background: transparent,
		border: $var-theme-background
	),


	theme-contrast : (
		color: $var-theme-background-contrast,
		background: $var-theme-color-contrast,
		border: transparent
	),

	theme-polar-contrast : (
		color: $var-theme-color-contrast,
		background: $var-theme-background-contrast,
		border: transparent
	),

);
 
$calculated-btn-schemes: (

	default: (

		hover: (
			background: $btn-background-default-hover,
			border: $btn-border-default-hover,
			color: $btn-color-default-hover,
		),

		active: (
			background: $btn-background-default-active,
			border: $btn-border-default-active,
			color: $btn-color-default-active,
		),
		init: (
			background: $btn-background-default,
			border: $btn-border-default,
			color: $btn-color-default,
		)
	),
	
	primary: (

		hover: (
			background: $btn-background-primary-hover,
			border: $btn-border-primary-hover,
			color: $btn-color-primary-hover,
		),

		active: (
			background: $btn-background-primary-active,
			border: $btn-border-primary-active,
			color: $btn-color-primary-active,
		),
		init: (
			background: $btn-background-primary,
			border: $btn-border-primary,
			color: $btn-color-primary,
		)
	),
	secondary: (

		hover: (
			background: $btn-background-secondary-hover,
			border: $btn-border-secondary-hover,
			color: $btn-color-secondary-hover,
		),

		active: (
			background: $btn-background-secondary-active,
			border: $btn-border-secondary-active,
			color: $btn-color-secondary-active,
		),
		init: (
			background: $btn-background-secondary,
			border: $btn-border-secondary,
			color: $btn-color-secondary,
		)
	),

	accent: (

		hover: (
			background: $btn-background-accent-hover,
			border: $btn-border-accent-hover,
			color: $btn-color-accent-hover,
		),

		active: (
			background: $btn-background-accent-active,
			border: $btn-border-accent-active,
			color: $btn-color-accent-active,
		),
		init: (
			background: $btn-background-accent,
			border: $btn-border-accent,
			color: $btn-color-accent,
		)
	),
	neutral: (

		hover: (
			background: $btn-background-neutral-hover,
			border: $btn-border-neutral-hover,
			color: $btn-color-neutral-hover,
		),

		active: (
			background: $btn-background-neutral-active,
			border: $btn-border-neutral-active,
			color: $btn-color-neutral-active,
		),
		init: (
			background: $btn-background-neutral,
			border: $btn-border-neutral,
			color: $btn-color-neutral,
		)
	),
	success: (

		hover: (
			background: $btn-background-success-hover,
			border: $btn-border-success-hover,
			color: $btn-color-success-hover,
		),

		active: (
			background: $btn-background-success-active,
			border: $btn-border-success-active,
			color: $btn-color-success-active,
		),
		init: (
			background: $btn-background-success,
			border: $btn-border-success,
			color: $btn-color-success,
		)
	),
	caution: (

		hover: (
			background: $btn-background-caution-hover,
			border: $btn-border-caution-hover,
			color: $btn-color-caution-hover,
		),

		active: (
			background: $btn-background-caution-active,
			border: $btn-border-caution-active,
			color: $btn-color-caution-active,
		),
		init: (
			background: $btn-background-caution,
			border: $btn-border-caution,
			color: $btn-color-caution,
		)
	),
	error:(

		hover: (
			background: $btn-background-error-hover,
			border: $btn-border-error-hover,
			color: $btn-color-error-hover,
		),

		active: (
			background: $btn-background-error-active,
			border: $btn-border-error-active,
			color: $btn-color-error-active,
		),
		init: (
			background: $btn-background-error,
			border: $btn-border-error,
			color: $btn-color-error,
		)
	),
	link:(

		hover: (
			background: $btn-background-link-hover,
			border: $btn-border-link-hover,
			color: $btn-color-link-hover,
		),

		active: (
			background: $btn-background-link-active,
			border: $btn-border-link-active,
			color: $btn-color-link-active,
		),
		init: (
			background: $btn-background-link,
			border: $btn-border-link,
			color: $btn-color-link,
		)
	),


	//schemes tthat vars or hooman shouldnt have control over
	
		primary-outline: (
			hover: (
				background: $btn-background-primary-hover,
				border: $btn-border-primary-hover,
				color: $btn-color-primary-hover,
			),

			active: (
				background: $btn-background-primary-active,
				border: $btn-border-primary-active,
				color: $btn-color-primary-active,
			),
			init: (
				background: transparent,
				border: $var-color-primary,
				color: $var-color-primary,
			)
		),
		secondary-outline: (
			hover: (
				background: $btn-background-secondary-hover,
				border: $btn-border-secondary-hover,
				color: $btn-color-secondary-hover,
			),

			active: (
				background: $btn-background-secondary-active,
				border: $btn-border-secondary-active,
				color: $btn-color-secondary-active,
			),
			init: (
				background: transparent,
				border: $var-color-secondary,
				color: $var-color-secondary,
			)
		),

		accent-outline: (
			hover: (
				background: $btn-background-accent-hover,
				border: $btn-border-accent-hover,
				color: $btn-color-accent-hover,
			),

			active: (
				background: $btn-background-accent-active,
				border: $btn-border-accent-active,
				color: $btn-color-accent-active,
			),
			init: (
				background: transparent,
				border: $var-color-accent,
				color: $var-color-accent,
			)
		),
		neutral-outline: (
			hover: (
				background: $btn-background-neutral-hover,
				border: $btn-border-neutral-hover,
				color: $btn-color-neutral-hover,
			),

			active: (
				background: $btn-background-neutral-active,
				border: $btn-border-neutral-active,
				color: $btn-color-neutral-active,
			),
			init: (
				background: transparent,
				border: $var-color-neutral,
				color: $var-color-neutral,
			)
		),
		success-outline: (
			hover: (
				background: $btn-background-success-hover,
				border: $btn-border-success-hover,
				color: $btn-color-success-hover,
			),

			active: (
				background: $btn-background-success-active,
				border: $btn-border-success-active,
				color: $btn-color-success-active,
			),
			init: (
				background: transparent,
				border: $var-color-success,
				color: $var-color-success,
			)
		),
		caution-outline: (
			hover: (
				background: $btn-background-caution-hover,
				border: $btn-border-caution-hover,
				color: $btn-color-caution-hover,
			),

			active: (
				background: $btn-background-caution-active,
				border: $btn-border-caution-active,
				color: $btn-color-caution-active,
			),
			init: (
				background: transparent,
				border: $var-color-caution,
				color: $var-color-caution,
			)
		),
		error-outline:(
			hover: (
				background: $btn-background-error-hover,
				border: $btn-border-error-hover,
				color: $btn-color-error-hover,
			),

			active: (
				background: $btn-background-error-active,
				border: $btn-border-error-active,
				color: $btn-color-error-active,
			),
			init: (
				background: transparent,
				border: $var-color-error,
				color: $var-color-error,
			)
		),

		gradient:(
			hover: (
				background: linear-gradient($btn-background-angle-gradient-hover,$var-gradient-start, $var-gradient-end), //@TODO var for this angle
				border: transparent,
				color: $btn-color-gradient-hover
			),

			active: (
				background: linear-gradient($btn-background-angle-gradient-active,$var-gradient-start, $var-gradient-end),
				border: transparent,
				color: $btn-color-gradient-active,
			),
			init: (
				background: linear-gradient($btn-background-angle-gradient,$var-gradient-start, $var-gradient-end),
				border: transparent,
				color: $btn-color-gradient,
			)
		),
		theme: (
			hover: map-get($calculated-btn-theme-relation,theme-contrast),
			active: map-get($calculated-btn-theme-relation,theme-contrast),
			init: map-get($calculated-btn-theme-relation,theme)
		),


		theme-polar: (
			hover: map-get($calculated-btn-theme-relation,theme-polar-contrast),
			active: map-get($calculated-btn-theme-relation,theme-polar-contrast),
			init: map-get($calculated-btn-theme-relation,theme-polar)
		),

		theme-outline: (
			hover: map-get($calculated-btn-theme-relation,theme),
			active: map-get($calculated-btn-theme-relation,theme),
			init: map-get($calculated-btn-theme-relation,theme-outline)
		),

		theme-polar-outline: (
			hover: map-get($calculated-btn-theme-relation,theme-polar),
			active: map-get($calculated-btn-theme-relation,theme-polar),
			init: map-get($calculated-btn-theme-relation,theme-polar-outline)
		)
);

$calculated-btn-font-size: $btn-font-size;
@if internal-is-convertable($btn-font-size) {
	$calculated-btn-font-size: rem($btn-font-size / $body-font-size)
}

	$calculated-btn-font-size-large: $btn-font-size-large;
	@if internal-is-convertable($btn-font-size-large) {
		$calculated-btn-font-size-large: rem($btn-font-size-large / $body-font-size)
	}

	$calculated-btn-font-size-small: $btn-font-size-small;
	@if internal-is-convertable($btn-font-size-small) {
		$calculated-btn-font-size-small: rem($btn-font-size-small / $body-font-size)
	}

$calculated-btn-line-height: type-lead( $btn-font-size,$btn-line-height );

$calculated-btn-single-line: $calculated-btn-line-height;
@if unitless($calculated-btn-single-line) and unit($btn-font-size) == px {
	$calculated-btn-single-line: #{1em * type-lead( $btn-font-size,$btn-line-height ) }
}

$calculated-btn-height: $btn-height;
@if internal-is-convertable($btn-height,$btn-font-size) {
	$calculated-btn-height: em($btn-height/$btn-font-size)
}@else if internal-is-convertable($btn-height){
	$calculated-btn-height: rem($btn-height/$body-font-size);
}


	$calculated-btn-height-large: $btn-height-large;
	@if internal-is-convertable($btn-height-large,$btn-font-size-large) {
		$calculated-btn-height-large: em($btn-height-large/$btn-font-size-large)
	}@else if internal-is-convertable($btn-height-large){
		$calculated-btn-height: rem($btn-height-large/$body-font-size);
	}

	$calculated-btn-height-small: $btn-height-small;
	@if internal-is-convertable($btn-height-small,$btn-font-size-small){
		$calculated-btn-height-small: em($btn-height-small/$btn-font-size-small)
	}@else if internal-is-convertable($btn-height-small){
		$calculated-btn-height: rem($btn-height-small/$body-font-size);
	}

$calculated-btn-gutter-x: $btn-gutter-x;
@if internal-is-convertable($btn-gutter-x,$btn-font-size) {
	$calculated-btn-gutter-x: em($btn-gutter-x / $btn-font-size)
}@else if internal-is-convertable($btn-gutter-x){
	$calculated-btn-height: rem($btn-gutter-x/$body-font-size);
}

$prefix: '.btn';






@mixin create-btn-schemes($args:(),$scheme:''){
	$defaults: (
		init: (
			border: '',
			background: '',
			color: '',
		),
		hover: (
			border: '',
			background: '',
			color: '',
		),
		active: (
			border: '',
			background: '',
			color: '',
		)
	);
	$opts: map-merge($defaults,$args);


	@each $state,$properties in $opts {

		@if $state == 'hover' {
			
		
			@at-root &:hover,
			#{$prefix}-group#{$prefix}-group-unite:hover &,
			
			&:focus,
			#{$prefix}-group#{$prefix}-group-unite:focus &,

			&.focus,
			#{$prefix}-group#{$prefix}-group-unite.focus & {
				@include internal-btn-set-scheme($properties)
			}
			// @at-root &:hover,
			// &:focus,
			// &:.focus {
			//     @include internal-btn-set-scheme($properties)
			// }

		}@else if $state == 'active' {
			@at-root &:active,
			#{$prefix}-group#{$prefix}-group-unite:active &,

			&.active,
			#{$prefix}-group#{$prefix}-group-unite.active & {
				@include internal-btn-set-scheme($properties);
			}
			
		}@else if $state == 'init' {
			@at-root %extend-internal-btn-init-#{$scheme} {
				@include internal-btn-set-scheme($properties);
			}


			@at-root &,
			&#{$prefix}-no-interaction,
			&#{$prefix}-disabled,
			#{$prefix}-disabled & {
				@extend %extend-internal-btn-init-#{$scheme};
			}
		
		@at-root 
			&#{$prefix}-no-interaction:hover,
			&#{$prefix}-no-interaction:focus,
			&#{$prefix}-no-interaction.focus,
			&#{$prefix}-no-interaction:active,
			&#{$prefix}-no-interaction.active,

			&#{$prefix}-disabled:hover,
			&#{$prefix}-disabled:focus,
			&#{$prefix}-disabled.focus,
			&#{$prefix}-disabled:active,
			&#{$prefix}-disabled.active,
			
			#{$prefix}-disabled:hover &,
			#{$prefix}-disabled:focus &,
			#{$prefix}-disabled.focus &,
			#{$prefix}-disabled:active &,
			#{$prefix}-disabled.active &
			{
				@extend %extend-internal-btn-init-#{$scheme};
			}
		}
	}

}

@mixin internal-btn-set-scheme($properties,$add-important: false) {


	$important: '';

	@if $add-important {

		$important: '!important';
	}

	@if map-get($properties,border) {
		border-color: map-get($properties,border) #{$important};
	}

	@if map-get($properties,background) {
		background: map-get($properties,background) #{$important};
	}

	@if map-get($properties,color) {
		color: map-get($properties,color) #{$important};
	}

}

@function internal-btn-calculate-disabled($color){
	@if type-of($color) == 'color' and $color != transparent {
		@return rgba( $color,$global-disabled-opacity );
	}@else {
		@return $color;
	}
}


#{$prefix} {

	@at-root %for-btn-global {

		&-radius {
			border-radius: $btn-border-radius;

			&-small {
				border-radius: $btn-border-radius-small;
			}

			&-large {
				border-radius: $btn-border-radius-large;
			}
		}
	}
	
	
	@at-root %for-btn {

		& {
			@include type-set((
				size: #{$calculated-btn-font-size},
				leading: #{$calculated-btn-line-height},
				weight: $btn-font-weight,
				style: $btn-font-style,
				font: $btn-font-family,
				align:center,
				decoration:none,
				case: $btn-text-transform,
			));
			// overflow:hidden;
			padding-top: calc(  (  (#{ $calculated-btn-height } - (#{$btn-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{ $calculated-btn-height } - (#{$btn-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			min-height:$calculated-btn-height;
			padding-right: $calculated-btn-gutter-x;
			padding-left: $calculated-btn-gutter-x;
			border: $btn-border-width solid transparent;
			transition: $btn-transition-duration all $transition-timing;
			width:auto;
			display:inline-flex;
			align-content: center;
			justify-content: center;
			align-items: center;
			background:none;
			-webkit-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;

			.badge,
			.symbol {
				&:last-child {
					margin-left: .25em;
				}
				&:first-child {
					margin-right: .25em;
				}
			}
			
		}

		&-large {
			@extend %for-btn-global-radius-large;
			padding-top: calc(  (  (#{ $calculated-btn-height-large } - (#{$btn-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{ $calculated-btn-height-large } - (#{$btn-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			min-height:$calculated-btn-height-large;
			@include br(xs){
				font-size: $calculated-btn-font-size-large;
			}

		}
	
		&-small {
			@extend %for-btn-global-radius-small;
			font-size: $calculated-btn-font-size-small;
			padding-top: calc(  (  (#{ $calculated-btn-height-small } - (#{$btn-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			padding-bottom: calc(  (  (#{ $calculated-btn-height-small } - (#{$btn-border-width} * 2)) - (#{$calculated-btn-single-line}) ) * .5 );
			min-height:$calculated-btn-height-small;
		}
		
		&-in-nav {
			padding-top: 0;
			padding-bottom:0;
			align-self:stretch;
		}

		&-in-group {
			position:relative;
			max-width:100%;
			flex: 0 0 auto; // ??

			&:hover,
			&:active,
			&.active,
			&:focus,
			&.focus,
			&.open {
				z-index:1;
			}

			& {
				@extend %for-no-shadow-important !optional;
			}
		}
		
	}
		& {
			@extend %for-btn;
		
			#{$prefix}-large &,
			&#{$prefix}-large {
				@extend %for-btn-large;
			}
	
			#{$prefix}-small &,
			&#{$prefix}-small {
				@extend %for-btn-small;
			}

			.nav-block.nav-block-stretch > &,
			.nav > & {
				@extend %for-btn-in-nav;
			}

			#{$prefix}-no-radius & {
				@extend %for-no-radius !optional;
			}

			#{$prefix}-group & {
				@extend %for-btn-in-group;
			}

			&-disabled {
				@extend %for-disabled !optional;
			}
			
			&-disabled,
			&-disabled & {
				@extend %for-no-shadow !optional;
			}
			

		}

	@at-root %for-btn-symbol {

		& {
			width: $calculated-btn-height;
			padding-left:0;
			padding-right:0;
		}

		&-large {
			width: $calculated-btn-height-large ;
		}

		&-small {
			width: $calculated-btn-height-small;
		}
	}

		&-symbol {
			@extend %for-btn-symbol;

			#{$prefix}-small &,
			&#{$prefix}-small {
				@extend %for-btn-symbol-small;
			}

			#{$prefix}-large &,
			&#{$prefix}-large {
				@extend %for-btn-symbol-large;
			}
		}



	@at-root %for-btn-and-group {
		

		& {
			@extend %for-btn-global-radius;
			box-shadow: $btn-box-shadow;
			max-width:100%;
			background-color:transparent;
			color:inherit;
			-webkit-appearance:none;
			appearance:none;
			vertical-align: middle;
			@extend %for-anchor-reset-hover !optional;
	
			&:hover,
			&:focus,
			&.focus,
			&:active,
			&.active {
				color:inherit;
				&:not(.btn-no-interaction) {
					box-shadow: $btn-box-shadow-hover;
				}
			}

			&-small {
				@extend %for-btn-global-radius-small;
			}

			&-large {
				@extend %for-btn-global-radius-large;
			}

			&-in-nav {
				@extend %for-no-radius !optional;
				@extend %for-no-shadow-important !optional;
				height: #{ $calculated-nav-height }!important;
			}
		}

	}

		&,&-group {
			@extend %for-btn-and-group;
			@extend %for-btn-global-radius;
			
			&#{$prefix}-large {
				@extend %for-btn-and-group-large;
			}

			&#{$prefix}-small {
				@extend %for-btn-and-group-small;
			}

			.nav > & {
				@extend %for-btn-and-group-in-nav;
				
			}

			&#{$prefix}-no-radius {
				@extend %for-no-radius !optional;
			}
			
			&#{$prefix}-no-shadow {
				@extend %for-no-shadow-important !optional;
			}

			&#{$prefix}-block {
				display:flex;
				width:100%;

				&-mobile {
					@include br(#{$mobile-br-max}-max) {
						display:flex;
						width:100%;
					}
				}
			}


		}
		
	
	///updates here should match input-group 
	&-group {
		display:inline-flex;
		align-content: stretch;
		align-items: stretch;
		position:relative;
		max-width:100%;
		padding:0;
		border:0;
		background:none;
		font:inherit;
		overflow-x:auto;
		overflow-y:visible;
		
		&#{$prefix}-block {
			display:flex;
			width:100%;

			& > .btn:not(.btn-symbol) {
				flex: 1 1;
			}

			@include br(#{$mobile-br-max}-max) {
				&-mobile {
					display:flex;
					width:100%;

					& > .btn:not(.btn-symbol) {
						flex: 1 1;
					}
				}
			}
		}

		&#{&}-horizontal {

			#{$prefix}-symbol {
				flex: 0 0 auto;
			}
			

			&:not(#{$prefix}-group-responsive) {

				> #{$prefix}:nth-last-child(n+2) {
					border-top-right-radius: 0!important;
					border-bottom-right-radius: 0!important;
				}

				> #{$prefix}:nth-child(n+2) {
					border-top-left-radius: 0!important;
					border-bottom-left-radius: 0!important;
					margin-left: $btn-border-width * -1;

					&:not(:focus):not(.focus):not(:hover) {
						border-left-color: $btn-group-separator-color;
					}
				}
			}
		}

		&#{&}-vertical {
			flex-direction:column;

			> .btn-symbol {
				width:auto;
			}

			> #{$prefix}:nth-last-child(n+2) {
				border-bottom-right-radius: 0!important;
				border-bottom-left-radius: 0!important;
			}

			> #{$prefix}:nth-child(n+2) {
				border-top-right-radius: 0!important;
				border-top-left-radius: 0!important;
				margin-top: $btn-border-width * -1;

				&:not(:focus):not(.focus):not(:hover) {
					border-top-color: $btn-group-separator-color;
				}
			}
		}

		&#{&}-responsive {

			@include br($mobile-br-max-polar){

				&#{$prefix}-group-horizontal {

					> .btn-symbol {
						width:auto;
					}
					
					> #{$prefix}:nth-last-child(n+2) {
						border-top-right-radius: 0!important;
						border-bottom-right-radius: 0!important;
					}

					> #{$prefix}:nth-child(n+2) {
						border-top-left-radius: 0!important;
						border-bottom-left-radius: 0!important;
						margin-left: $btn-border-width * -1;
		
						&:not(:focus):not(.focus):not(:hover) {
							border-left-color: $btn-group-separator-color;
						}
					}
				}
			}
			@include br(#{$mobile-br-max}-max) {
				width:100%;
				flex-wrap:wrap;
				display:flex;
				flex-direction:column;

				> #{$prefix}:nth-last-child(n+2) {
					border-bottom-right-radius: 0!important;
					border-bottom-left-radius: 0!important;
				}

				> #{$prefix}:nth-child(n+2) {
					border-top-right-radius: 0!important;
					border-top-left-radius: 0!important;
					margin-top: $btn-border-width * -1;
	
					&:not(:focus):not(.focus):not(:hover) {
						border-top-color: $btn-group-separator-color;
					}
				}
			}
		} 
	}

	@each $scheme,$properties in $calculated-btn-schemes {
		@at-root %for-btn-#{$scheme} {

			@include create-btn-schemes($properties,$scheme);

			@if $scheme == 'link' or str-index($scheme, '-outline'){
				@extend %for-no-shadow;
			}
		}
		&#{&}-#{$scheme} {
			@extend %for-btn-#{$scheme};
		}
	}
}